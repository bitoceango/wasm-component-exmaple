// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_opt.isle
// - src/opts/arithmetic.isle
// - src/opts/bitops.isle
// - src/opts/cprop.isle
// - src/opts/extends.isle
// - src/opts/icmp.isle
// - src/opts/remat.isle
// - src/opts/selects.isle
// - src/opts/spaceship.isle
// - src/opts/shifts.isle
// - src/opts/vector.isle
// - /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_etor_returns) -> ();
    type inst_data_tupled_etor_returns: Default
        + IntoContextIter<Context = Self, Output = TypeAndInstructionData>;
    fn inst_data_tupled_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::inst_data_tupled_etor_returns,
    ) -> ();
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn iconst_sextend_etor(&mut self, arg0: TypeAndInstructionData) -> Option<(Type, i64)>;
    type sextend_maybe_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn sextend_maybe_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::sextend_maybe_etor_returns,
    ) -> ();
    type uextend_maybe_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn uextend_maybe_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::uextend_maybe_etor_returns,
    ) -> ();
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 323.
    return v5;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src/prelude_opt.isle line 30.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 31.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 32.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 33.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 34.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 35.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 36.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 37.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 38.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 39.
    return v4;
}

// Generated as internal constructor for term spaceship_s.
pub fn constructor_spaceship_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_sgt(ctx, arg0, arg1, arg2);
    let v5 = constructor_slt(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src/prelude_opt.isle line 43.
    return v6;
}

// Generated as internal constructor for term spaceship_u.
pub fn constructor_spaceship_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_ugt(ctx, arg0, arg1, arg2);
    let v5 = constructor_ult(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src/prelude_opt.isle line 46.
    return v6;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1074 =
                                                            constructor_smin(ctx, v1010, v30, v27);
                                                        let v1075 =
                                                            constructor_splat(ctx, v2.0, v1074);
                                                        // Rule at src/opts/vector.isle line 54.
                                                        returns.extend(Some(v1075));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1076 =
                                                            constructor_umin(ctx, v1010, v30, v27);
                                                        let v1077 =
                                                            constructor_splat(ctx, v2.0, v1076);
                                                        // Rule at src/opts/vector.isle line 57.
                                                        returns.extend(Some(v1077));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1078 =
                                                            constructor_smax(ctx, v1010, v30, v27);
                                                        let v1079 =
                                                            constructor_splat(ctx, v2.0, v1078);
                                                        // Rule at src/opts/vector.isle line 60.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1080 =
                                                            constructor_umax(ctx, v1010, v30, v27);
                                                        let v1081 =
                                                            constructor_splat(ctx, v2.0, v1080);
                                                        // Rule at src/opts/vector.isle line 63.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iadd = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Iadd = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v118 = constructor_iadd(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v119 = constructor_iadd(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v120 = constructor_iadd(
                                                                    ctx, v2.0, v118, v119,
                                                                );
                                                                let v121 = C::subsume(ctx, v120);
                                                                // Rule at src/opts/arithmetic.isle line 135.
                                                                returns.extend(Some(v121));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v652,
                                                        imm: v653,
                                                    } => {
                                                        if let &Opcode::Iconst = v652 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Iadd = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v192,
                                                                                    imm: v193,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v192 {
                                                                                        let v654 = constructor_iadd(ctx, v2.0, v124.0, v106.0);
                                                                                        let v655 = constructor_iadd(ctx, v2.0, v124.1, v106.1);
                                                                                        let v656 = constructor_iadd(ctx, v2.0, v654, v655);
                                                                                        // Rule at src/opts/cprop.isle line 227.
                                                                                        returns.extend(Some(v656));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1010 = C::lane_type(ctx, v2.0);
                                                                let v1058 = constructor_iadd(
                                                                    ctx, v1010, v30, v27,
                                                                );
                                                                let v1059 = constructor_splat(
                                                                    ctx, v2.0, v1058,
                                                                );
                                                                // Rule at src/opts/vector.isle line 30.
                                                                returns.extend(Some(v1059));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v28 = constructor_isub(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/arithmetic.isle line 24.
                                                returns.extend(Some(v28));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        match v122 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v192,
                                                                            imm: v193,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v192 {
                                                                                if v2.0 == v168.0 {
                                                                                    let v577 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                                    let v578 = constructor_iadd(ctx, v2.0, v124.0, v577);
                                                                                    // Rule at src/opts/cprop.isle line 126.
                                                                                    returns.extend(Some(v578));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v583,
                                                                            imm: v584,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Iconst = v583 {
                                                                                if v2.0 == v128.0 {
                                                                                    let v585 = C::u64_from_imm64(ctx, v584);
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v595 = C::u64_add(ctx, v585, v16);
                                                                                    let v596 = C::imm64_masked(ctx, v2.0, v595);
                                                                                    let v597 = constructor_iconst(ctx, v2.0, v596);
                                                                                    let v598 = constructor_isub(ctx, v2.0, v597, v124.1);
                                                                                    // Rule at src/opts/cprop.isle line 152.
                                                                                    returns.extend(Some(v598));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v192,
                                                                            imm: v193,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v192 {
                                                                                if v2.0 == v168.0 {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v194 = C::u64_from_imm64(ctx, v193);
                                                                                    let v590 = C::u64_sub(ctx, v16, v194);
                                                                                    let v591 = C::imm64_masked(ctx, v2.0, v590);
                                                                                    let v592 = constructor_iconst(ctx, v2.0, v591);
                                                                                    let v594 = constructor_iadd(ctx, v2.0, v124.0, v592);
                                                                                    // Rule at src/opts/cprop.isle line 148.
                                                                                    returns.extend(Some(v594));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                if v2.0 == v19.0 {
                                                                    let v65 = constructor_ineg(
                                                                        ctx, v2.0, v30,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 69.
                                                                    returns.extend(Some(v65));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v494 =
                                                                    C::u64_add(ctx, v24, v16);
                                                                let v495 = C::imm64_masked(
                                                                    ctx, v493, v494,
                                                                );
                                                                let v496 = constructor_iconst(
                                                                    ctx, v493, v495,
                                                                );
                                                                let v497 = C::subsume(ctx, v496);
                                                                // Rule at src/opts/cprop.isle line 3.
                                                                returns.extend(Some(v497));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 6.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Iadd = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Iadd = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v136 = constructor_iadd(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v137 = constructor_iadd(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v138 = constructor_iadd(
                                                                ctx, v2.0, v136, v137,
                                                            );
                                                            let v139 = C::subsume(ctx, v138);
                                                            // Rule at src/opts/arithmetic.isle line 137.
                                                            returns.extend(Some(v139));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Ineg = v29 {
                                        if v2.0 == v19.0 {
                                            let v31 = constructor_isub(ctx, v2.0, v7.1, v30);
                                            // Rule at src/opts/arithmetic.isle line 26.
                                            returns.extend(Some(v31));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v568 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 95.
                                            returns.extend(Some(v568));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 4.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1010 = C::lane_type(ctx, v2.0);
                                                                let v1060 = constructor_isub(
                                                                    ctx, v1010, v30, v27,
                                                                );
                                                                let v1061 = constructor_splat(
                                                                    ctx, v2.0, v1060,
                                                                );
                                                                // Rule at src/opts/vector.isle line 33.
                                                                returns.extend(Some(v1061));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v44 = constructor_iadd(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/arithmetic.isle line 31.
                                                returns.extend(Some(v44));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    match v122 {
                                                        &Opcode::Iadd => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            if v2.0 == v168.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v194 = C::u64_from_imm64(ctx, v193);
                                                                                let v590 = C::u64_sub(ctx, v16, v194);
                                                                                let v591 = C::imm64_masked(ctx, v2.0, v590);
                                                                                let v592 = constructor_iconst(ctx, v2.0, v591);
                                                                                let v593 = constructor_isub(ctx, v2.0, v124.0, v592);
                                                                                // Rule at src/opts/cprop.isle line 144.
                                                                                returns.extend(Some(v593));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Isub => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v583,
                                                                        imm: v584,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v583 {
                                                                            if v2.0 == v128.0 {
                                                                                let v585 = C::u64_from_imm64(ctx, v584);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v586 = C::u64_sub(ctx, v585, v16);
                                                                                let v587 = C::imm64_masked(ctx, v2.0, v586);
                                                                                let v588 = constructor_iconst(ctx, v2.0, v587);
                                                                                let v589 = constructor_isub(ctx, v2.0, v588, v124.1);
                                                                                // Rule at src/opts/cprop.isle line 140.
                                                                                returns.extend(Some(v589));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            if v2.0 == v168.0 {
                                                                                let v194 = C::u64_from_imm64(ctx, v193);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v579 = C::u64_add(ctx, v194, v16);
                                                                                let v580 = C::imm64_masked(ctx, v2.0, v579);
                                                                                let v581 = constructor_iconst(ctx, v2.0, v580);
                                                                                let v582 = constructor_isub(ctx, v2.0, v124.0, v581);
                                                                                // Rule at src/opts/cprop.isle line 136.
                                                                                returns.extend(Some(v582));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 13.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v498 =
                                                                    C::u64_sub(ctx, v24, v16);
                                                                let v499 = C::imm64_masked(
                                                                    ctx, v493, v498,
                                                                );
                                                                let v500 = constructor_iconst(
                                                                    ctx, v493, v499,
                                                                );
                                                                let v501 = C::subsume(ctx, v500);
                                                                // Rule at src/opts/cprop.isle line 9.
                                                                returns.extend(Some(v501));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 10.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v22,
                                imm: v23,
                            } = &v19.1
                            {
                                if let &Opcode::Iconst = v22 {
                                    if v2.0 == v19.0 {
                                        let v24 = C::u64_from_imm64(ctx, v23);
                                        if v24 == 0x0 {
                                            let v25 = constructor_ineg(ctx, v2.0, v7.1);
                                            // Rule at src/opts/arithmetic.isle line 18.
                                            returns.extend(Some(v25));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v569 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                        let v570 = constructor_ineg(ctx, v2.0, v569);
                                        // Rule at src/opts/cprop.isle line 100.
                                        returns.extend(Some(v570));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                    let v805 = C::remat(ctx, arg0);
                                    // Rule at src/opts/remat.isle line 8.
                                    returns.extend(Some(v805));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src/opts/arithmetic.isle line 50.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS {
                                    return;
                                }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                let v613 = C::i64_neg(ctx, v61.1);
                                let v614 = C::i64_as_u64(ctx, v613);
                                let v615 = C::i64_as_u64(ctx, v61.1);
                                let v616 = C::u64_lt(ctx, v614, v615);
                                if v616 == true {
                                    if v2.0 == v61.0 {
                                        let v617 = C::imm64_masked(ctx, v2.0, v614);
                                        let v618 = constructor_iconst(ctx, v2.0, v617);
                                        let v619 = constructor_iadd(ctx, v2.0, v7.0, v618);
                                        // Rule at src/opts/cprop.isle line 181.
                                        returns.extend(Some(v619));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Imul = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Imul = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v140 = constructor_imul(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v141 = constructor_imul(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v142 = constructor_imul(
                                                                    ctx, v2.0, v140, v141,
                                                                );
                                                                let v143 = C::subsume(ctx, v142);
                                                                // Rule at src/opts/arithmetic.isle line 140.
                                                                returns.extend(Some(v143));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v652,
                                                        imm: v653,
                                                    } => {
                                                        if let &Opcode::Iconst = v652 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Imul = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v192,
                                                                                    imm: v193,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v192 {
                                                                                        let v657 = constructor_imul(ctx, v2.0, v124.0, v106.0);
                                                                                        let v658 = constructor_imul(ctx, v2.0, v124.1, v106.1);
                                                                                        let v659 = constructor_imul(ctx, v2.0, v657, v658);
                                                                                        // Rule at src/opts/cprop.isle line 231.
                                                                                        returns.extend(Some(v659));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1010 = C::lane_type(ctx, v2.0);
                                                                let v1062 = constructor_imul(
                                                                    ctx, v1010, v30, v27,
                                                                );
                                                                let v1063 = constructor_splat(
                                                                    ctx, v2.0, v1062,
                                                                );
                                                                // Rule at src/opts/vector.isle line 36.
                                                                returns.extend(Some(v1063));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Ineg = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v48 = constructor_imul(
                                                                    ctx, v2.0, v30, v27,
                                                                );
                                                                let v49 = C::subsume(ctx, v48);
                                                                // Rule at src/opts/arithmetic.isle line 38.
                                                                returns.extend(Some(v49));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        match v16 {
                                            0x0 => {
                                                if v2.0 == v11.0 {
                                                    let v57 = C::subsume(ctx, v7.1);
                                                    // Rule at src/opts/arithmetic.isle line 59.
                                                    returns.extend(Some(v57));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                if v2.0 == v11.0 {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src/opts/arithmetic.isle line 53.
                                                    returns.extend(Some(v17));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            0x2 => {
                                                let v73 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 92.
                                                returns.extend(Some(v73));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Imul = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            if v2.0 == v168.0 {
                                                                                let v599 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                                                let v600 = constructor_imul(ctx, v2.0, v124.0, v599);
                                                                                // Rule at src/opts/cprop.isle line 157.
                                                                                returns.extend(Some(v600));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v492 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v493) = v492 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v493 {
                                                                    let v24 =
                                                                        C::u64_from_imm64(ctx, v23);
                                                                    let v502 =
                                                                        C::u64_mul(ctx, v24, v16);
                                                                    let v503 = C::imm64_masked(
                                                                        ctx, v493, v502,
                                                                    );
                                                                    let v504 = constructor_iconst(
                                                                        ctx, v493, v503,
                                                                    );
                                                                    let v505 =
                                                                        C::subsume(ctx, v504);
                                                                    // Rule at src/opts/cprop.isle line 15.
                                                                    returns.extend(Some(v505));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v74 = C::imm64_power_of_two(ctx, v15);
                                        if let Some(v75) = v74 {
                                            let v76 = C::imm64(ctx, v75);
                                            let v77 = constructor_iconst(ctx, v2.0, v76);
                                            let v78 = constructor_ishl(ctx, v2.0, v7.0, v77);
                                            // Rule at src/opts/arithmetic.isle line 99.
                                            returns.extend(Some(v78));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Imul = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Imul = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v144 = constructor_imul(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v145 = constructor_imul(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v146 = constructor_imul(
                                                                ctx, v2.0, v144, v145,
                                                            );
                                                            let v147 = C::subsume(ctx, v146);
                                                            // Rule at src/opts/arithmetic.isle line 142.
                                                            returns.extend(Some(v147));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        let v79 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v80) = v79 {
                                            let v81 = C::imm64(ctx, v80);
                                            let v82 = constructor_iconst(ctx, v2.0, v81);
                                            let v83 = constructor_ishl(ctx, v2.0, v7.1, v82);
                                            // Rule at src/opts/arithmetic.isle line 101.
                                            returns.extend(Some(v83));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        if v2.0 == v19.0 {
                                            let v571 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 103.
                                            returns.extend(Some(v571));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v64 = constructor_ineg(ctx, v2.0, v7.0);
                                        // Rule at src/opts/arithmetic.isle line 65.
                                        returns.extend(Some(v64));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1066 = constructor_umulhi(
                                                            ctx, v1010, v30, v27,
                                                        );
                                                        let v1067 =
                                                            constructor_splat(ctx, v2.0, v1066);
                                                        // Rule at src/opts/vector.isle line 42.
                                                        returns.extend(Some(v1067));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1010 = C::lane_type(ctx, v2.0);
                                                        let v1064 = constructor_smulhi(
                                                            ctx, v1010, v30, v27,
                                                        );
                                                        let v1065 =
                                                            constructor_splat(ctx, v2.0, v1064);
                                                        // Rule at src/opts/vector.isle line 39.
                                                        returns.extend(Some(v1065));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 83.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v492 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v493) = v492 {
                                        if v11.0 == v493 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v511 = C::u64_udiv(ctx, v24, v16);
                                                        if let Some(v512) = v511 {
                                                            if v11.0 == v19.0 {
                                                                let v513 = C::imm64_masked(
                                                                    ctx, v493, v512,
                                                                );
                                                                let v514 = constructor_iconst(
                                                                    ctx, v493, v513,
                                                                );
                                                                let v515 = C::subsume(ctx, v514);
                                                                // Rule at src/opts/cprop.isle line 28.
                                                                returns.extend(Some(v515));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 79.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v492 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v493) = v492 {
                                        if v11.0 == v493 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v506 = C::u64_sdiv(ctx, v24, v16);
                                                        if let Some(v507) = v506 {
                                                            if v11.0 == v19.0 {
                                                                let v508 = C::imm64_masked(
                                                                    ctx, v493, v507,
                                                                );
                                                                let v509 = constructor_iconst(
                                                                    ctx, v493, v508,
                                                                );
                                                                let v510 = C::subsume(ctx, v509);
                                                                // Rule at src/opts/cprop.isle line 21.
                                                                returns.extend(Some(v510));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Band = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Band = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v148 = constructor_band(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v149 = constructor_band(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v150 = constructor_band(
                                                                    ctx, v2.0, v148, v149,
                                                                );
                                                                let v151 = C::subsume(ctx, v150);
                                                                // Rule at src/opts/arithmetic.isle line 145.
                                                                returns.extend(Some(v151));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v652,
                                                        imm: v653,
                                                    } => {
                                                        if let &Opcode::Iconst = v652 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Band = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v192,
                                                                                    imm: v193,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v192 {
                                                                                        let v660 = constructor_band(ctx, v2.0, v124.0, v106.0);
                                                                                        let v661 = constructor_band(ctx, v2.0, v124.1, v106.1);
                                                                                        let v662 = constructor_band(ctx, v2.0, v660, v661);
                                                                                        // Rule at src/opts/cprop.isle line 235.
                                                                                        returns.extend(Some(v662));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v783,
                                    args: ref v784,
                                    cond: ref v785,
                                } => {
                                    if let &Opcode::Icmp = v783 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v753,
                                                        args: ref v754,
                                                        cond: ref v755,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Icmp = v753 {
                                                            let v789 = constructor_intcc_comparable(
                                                                ctx, v755, v785,
                                                            );
                                                            if let Some(v790) = v789 {
                                                                if v11.0 == v19.0 {
                                                                    let v756 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v754,
                                                                        );
                                                                    let v786 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v784,
                                                                        );
                                                                    if v756.0 == v786.0 {
                                                                        if v756.1 == v786.1 {
                                                                            let v791 = constructor_decompose_intcc(ctx, v755);
                                                                            let v792 = constructor_decompose_intcc(ctx, v785);
                                                                            let v793 = C::u64_and(
                                                                                ctx, v791, v792,
                                                                            );
                                                                            let v794 = constructor_compose_icmp(ctx, v493, v793, v790, v756.0, v756.1);
                                                                            // Rule at src/opts/icmp.isle line 128.
                                                                            returns
                                                                                .extend(Some(v794));
                                                                            if returns.len()
                                                                                >= MAX_ISLE_RETURNS
                                                                            {
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1048 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1049) = v1048 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1010 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1050 = constructor_band(
                                                                        ctx, v1010, v30, v27,
                                                                    );
                                                                    let v1051 = constructor_splat(
                                                                        ctx, v2.0, v1050,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 14.
                                                                    returns.extend(Some(v1051));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v55 =
                                                            constructor_iconst_u(ctx, v53, 0x0);
                                                        let v56 = C::subsume(ctx, v55);
                                                        // Rule at src/opts/bitops.isle line 35.
                                                        returns.extend(Some(v56));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v672 = C::value_type(ctx, v30);
                                                        let v705 = C::value_type(ctx, v27);
                                                        if v672 == v705 {
                                                            let v706 = constructor_band(
                                                                ctx, v672, v30, v27,
                                                            );
                                                            let v707 = constructor_uextend(
                                                                ctx, v2.0, v706,
                                                            );
                                                            // Rule at src/opts/extends.isle line 71.
                                                            returns.extend(Some(v707));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Band = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            if v2.0 == v168.0 {
                                                                                let v603 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                                                let v604 = constructor_band(ctx, v2.0, v124.0, v603);
                                                                                // Rule at src/opts/cprop.isle line 163.
                                                                                returns.extend(Some(v604));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref v753,
                                                    args: ref v754,
                                                    cond: ref v755,
                                                } => {
                                                    if let &Opcode::Icmp = v753 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v52 = C::ty_int(ctx, v2.0);
                                                            if let Some(v53) = v52 {
                                                                // Rule at src/opts/icmp.isle line 39.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } => {
                                                    match v29 {
                                                        &Opcode::Uextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                let v52 = C::ty_int(ctx, v2.0);
                                                                if let Some(v53) = v52 {
                                                                    let mut v759 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v30, &mut v759,
                                                                    );
                                                                    let mut v759 =
                                                                        v759.into_context_iter();
                                                                    while let Some(v760) =
                                                                        v759.next(ctx)
                                                                    {
                                                                        if let &InstructionData::IntCompare {
                                                                            opcode: ref v763,
                                                                            args: ref v764,
                                                                            cond: ref v765,
                                                                        } = &v760.1 {
                                                                            if let &Opcode::Icmp = v763 {
                                                                                // Rule at src/opts/icmp.isle line 44.
                                                                                returns.extend(Some(v7.0));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let v672 = C::value_type(ctx, v30);
                                                            let v673 = C::ty_mask(ctx, v672);
                                                            let v674 = C::u64_and(ctx, v16, v673);
                                                            let v675 = C::u64_eq(ctx, v673, v674);
                                                            if v675 == true {
                                                                // Rule at src/opts/extends.isle line 17.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v672 = C::value_type(ctx, v30);
                                                            let v673 = C::ty_mask(ctx, v672);
                                                            let v676 = C::u64_eq(ctx, v16, v673);
                                                            if v676 == true {
                                                                let v677 = constructor_uextend(
                                                                    ctx, v2.0, v30,
                                                                );
                                                                // Rule at src/opts/extends.isle line 23.
                                                                returns.extend(Some(v677));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v492 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v493) = v492 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v493 {
                                                                    let v24 =
                                                                        C::u64_from_imm64(ctx, v23);
                                                                    let v16 =
                                                                        C::u64_from_imm64(ctx, v15);
                                                                    let v520 =
                                                                        C::u64_and(ctx, v24, v16);
                                                                    let v521 = C::imm64_masked(
                                                                        ctx, v493, v520,
                                                                    );
                                                                    let v522 = constructor_iconst(
                                                                        ctx, v493, v521,
                                                                    );
                                                                    let v523 =
                                                                        C::subsume(ctx, v522);
                                                                    // Rule at src/opts/cprop.isle line 41.
                                                                    returns.extend(Some(v523));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v57 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 34.
                                                returns.extend(Some(v57));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 14.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Band = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Band = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v152 = constructor_band(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v153 = constructor_band(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v154 = constructor_band(
                                                                ctx, v2.0, v152, v153,
                                                            );
                                                            let v155 = C::subsume(ctx, v154);
                                                            // Rule at src/opts/arithmetic.isle line 147.
                                                            returns.extend(Some(v155));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                                    let v56 = C::subsume(ctx, v55);
                                                    // Rule at src/opts/bitops.isle line 36.
                                                    returns.extend(Some(v56));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v573 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 110.
                                            returns.extend(Some(v573));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 12.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 29.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v17 = C::subsume(ctx, v7.0);
                                        // Rule at src/opts/bitops.isle line 30.
                                        returns.extend(Some(v17));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Band => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        if let &Opcode::Band = v122 {
                                                            let v854 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v855) = v854 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v855 {
                                                                        let v106 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v105,
                                                                            );
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v859,
                                                                                arg: v860,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Bnot = v859 {
                                                                                    if v11.0 == v110.0 {
                                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                        if v124.0 == v860 {
                                                                                            let v861 = constructor_bitselect(ctx, v855, v124.0, v124.1, v106.0);
                                                                                            // Rule at src/opts/selects.isle line 71.
                                                                                            returns.extend(Some(v861));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v860 {
                                                                                            let v863 = constructor_bitselect(ctx, v855, v124.1, v124.0, v106.0);
                                                                                            // Rule at src/opts/selects.isle line 73.
                                                                                            returns.extend(Some(v863));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v124 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v123,
                                                                            );
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.0, &mut v127,
                                                                        );
                                                                        let mut v127 = v127
                                                                            .into_context_iter();
                                                                        while let Some(v128) =
                                                                            v127.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v164,
                                                                                arg: v165,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Bnot = v164 {
                                                                                    if v11.0 == v128.0 {
                                                                                        if v106.1 == v165 {
                                                                                            let v865 = constructor_bitselect(ctx, v855, v165, v106.0, v124.1);
                                                                                            // Rule at src/opts/selects.isle line 75.
                                                                                            returns.extend(Some(v865));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v165 {
                                                                                            let v864 = constructor_bitselect(ctx, v855, v165, v106.1, v124.1);
                                                                                            // Rule at src/opts/selects.isle line 74.
                                                                                            returns.extend(Some(v864));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.1, &mut v167,
                                                                        );
                                                                        let mut v167 = v167
                                                                            .into_context_iter();
                                                                        while let Some(v168) =
                                                                            v167.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v171,
                                                                                arg: v172,
                                                                            } = &v168.1 {
                                                                                if let &Opcode::Bnot = v171 {
                                                                                    if v11.0 == v168.0 {
                                                                                        if v106.1 == v172 {
                                                                                            let v867 = constructor_bitselect(ctx, v855, v172, v106.0, v124.0);
                                                                                            // Rule at src/opts/selects.isle line 77.
                                                                                            returns.extend(Some(v867));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v172 {
                                                                                            let v866 = constructor_bitselect(ctx, v855, v172, v106.1, v124.0);
                                                                                            // Rule at src/opts/selects.isle line 76.
                                                                                            returns.extend(Some(v866));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v275 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.0, &mut v275,
                                                                        );
                                                                        let mut v275 = v275
                                                                            .into_context_iter();
                                                                        while let Some(v276) =
                                                                            v275.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v856,
                                                                                arg: v857,
                                                                            } = &v276.1 {
                                                                                if let &Opcode::Bnot = v856 {
                                                                                    if v11.0 == v276.0 {
                                                                                        if v124.0 == v857 {
                                                                                            let v858 = constructor_bitselect(ctx, v855, v124.0, v124.1, v106.1);
                                                                                            // Rule at src/opts/selects.isle line 70.
                                                                                            returns.extend(Some(v858));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v857 {
                                                                                            let v862 = constructor_bitselect(ctx, v855, v124.1, v124.0, v106.1);
                                                                                            // Rule at src/opts/selects.isle line 72.
                                                                                            returns.extend(Some(v862));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    if v30 == v106.1 {
                                                                        let v191 = constructor_bor(
                                                                            ctx, v2.0, v106.0, v7.0,
                                                                        );
                                                                        // Rule at src/opts/bitops.isle line 59.
                                                                        returns.extend(Some(v191));
                                                                        if returns.len()
                                                                            >= MAX_ISLE_RETURNS
                                                                        {
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bor = v122 {
                                                        let v106 =
                                                            C::unpack_value_array_2(ctx, v105);
                                                        let mut v109 =
                                                            C::inst_data_etor_returns::default();
                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                        let mut v109 = v109.into_context_iter();
                                                        while let Some(v110) = v109.next(ctx) {
                                                            match &v110.1 {
                                                                &InstructionData::Binary {
                                                                    opcode: ref v113,
                                                                    args: ref v114,
                                                                } => {
                                                                    match v113 {
                                                                        &Opcode::Bor => {
                                                                            if v2.0 == I64 {
                                                                                if v11.0 == I64 {
                                                                                    if v19.0 == I64
                                                                                    {
                                                                                        if v110.0
                                                                                            == I64
                                                                                        {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I64 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Bor = v131 {
                                                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                                                            C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                                            let mut v167 = v167.into_context_iter();
                                                                                                            while let Some(v168) = v167.next(ctx) {
                                                                                                                if v168.0 == I64 {
                                                                                                                    if let &InstructionData::Binary {
                                                                                                                        opcode: ref v247,
                                                                                                                        args: ref v248,
                                                                                                                    } = &v168.1 {
                                                                                                                        if let &Opcode::Bor = v247 {
                                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                                            let mut v240 = C::inst_data_etor_returns::default();
                                                                                                                            C::inst_data_etor(ctx, v133.1, &mut v240);
                                                                                                                            let mut v240 = v240.into_context_iter();
                                                                                                                            while let Some(v241) = v240.next(ctx) {
                                                                                                                                if v241.0 == I64 {
                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                        opcode: ref v331,
                                                                                                                                        args: ref v332,
                                                                                                                                    } = &v241.1 {
                                                                                                                                        if let &Opcode::Ishl = v331 {
                                                                                                                                            let v249 = C::unpack_value_array_2(ctx, v248);
                                                                                                                                            let mut v252 = C::inst_data_etor_returns::default();
                                                                                                                                            C::inst_data_etor(ctx, v249.0, &mut v252);
                                                                                                                                            let mut v252 = v252.into_context_iter();
                                                                                                                                            while let Some(v253) = v252.next(ctx) {
                                                                                                                                                if v253.0 == I64 {
                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                        opcode: ref v256,
                                                                                                                                                        args: ref v257,
                                                                                                                                                    } = &v253.1 {
                                                                                                                                                        if let &Opcode::Ishl = v256 {
                                                                                                                                                            let v258 = C::unpack_value_array_2(ctx, v257);
                                                                                                                                                            let mut v261 = C::inst_data_etor_returns::default();
                                                                                                                                                            C::inst_data_etor(ctx, v258.1, &mut v261);
                                                                                                                                                            let mut v261 = v261.into_context_iter();
                                                                                                                                                            while let Some(v262) = v261.next(ctx) {
                                                                                                                                                                if v262.0 == I64 {
                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                        opcode: ref v265,
                                                                                                                                                                        imm: v266,
                                                                                                                                                                    } = &v262.1 {
                                                                                                                                                                        if let &Opcode::Iconst = v265 {
                                                                                                                                                                            let v267 = C::u64_from_imm64(ctx, v266);
                                                                                                                                                                            if v267 == 0x18 {
                                                                                                                                                                                let mut v268 = C::inst_data_etor_returns::default();
                                                                                                                                                                                C::inst_data_etor(ctx, v249.1, &mut v268);
                                                                                                                                                                                let mut v268 = v268.into_context_iter();
                                                                                                                                                                                while let Some(v269) = v268.next(ctx) {
                                                                                                                                                                                    if v269.0 == I64 {
                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                            opcode: ref v375,
                                                                                                                                                                                            args: ref v376,
                                                                                                                                                                                        } = &v269.1 {
                                                                                                                                                                                            if let &Opcode::Ishl = v375 {
                                                                                                                                                                                                let mut v275 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v275);
                                                                                                                                                                                                let mut v275 = v275.into_context_iter();
                                                                                                                                                                                                while let Some(v276) = v275.next(ctx) {
                                                                                                                                                                                                    if v276.0 == I64 {
                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                            opcode: ref v279,
                                                                                                                                                                                                            args: ref v280,
                                                                                                                                                                                                        } = &v276.1 {
                                                                                                                                                                                                            if let &Opcode::Bor = v279 {
                                                                                                                                                                                                                let v281 = C::unpack_value_array_2(ctx, v280);
                                                                                                                                                                                                                let mut v284 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v281.0, &mut v284);
                                                                                                                                                                                                                let mut v284 = v284.into_context_iter();
                                                                                                                                                                                                                while let Some(v285) = v284.next(ctx) {
                                                                                                                                                                                                                    if v285.0 == I64 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v288,
                                                                                                                                                                                                                            args: ref v289,
                                                                                                                                                                                                                        } = &v285.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v288 {
                                                                                                                                                                                                                                let v290 = C::unpack_value_array_2(ctx, v289);
                                                                                                                                                                                                                                let mut v293 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v290.1, &mut v293);
                                                                                                                                                                                                                                let mut v293 = v293.into_context_iter();
                                                                                                                                                                                                                                while let Some(v294) = v293.next(ctx) {
                                                                                                                                                                                                                                    if v294.0 == I64 {
                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                            opcode: ref v297,
                                                                                                                                                                                                                                            imm: v298,
                                                                                                                                                                                                                                        } = &v294.1 {
                                                                                                                                                                                                                                            if let &Opcode::Iconst = v297 {
                                                                                                                                                                                                                                                let v299 = C::u64_from_imm64(ctx, v298);
                                                                                                                                                                                                                                                if v299 == 0xFF000000 {
                                                                                                                                                                                                                                                    let mut v300 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v281.1, &mut v300);
                                                                                                                                                                                                                                                    let mut v300 = v300.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v301) = v300.next(ctx) {
                                                                                                                                                                                                                                                        if v301.0 == I64 {
                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                opcode: ref v419,
                                                                                                                                                                                                                                                                args: ref v420,
                                                                                                                                                                                                                                                            } = &v301.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Band = v419 {
                                                                                                                                                                                                                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                                                                                                                                                                                    let mut v307 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v115.1, &mut v307);
                                                                                                                                                                                                                                                                    let mut v307 = v307.into_context_iter();
                                                                                                                                                                                                                                                                    while let Some(v308) = v307.next(ctx) {
                                                                                                                                                                                                                                                                        if v308.0 == I64 {
                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                opcode: ref v479,
                                                                                                                                                                                                                                                                                args: ref v480,
                                                                                                                                                                                                                                                                            } = &v308.1 {
                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v479 {
                                                                                                                                                                                                                                                                                    let mut v315 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v133.0, &mut v315);
                                                                                                                                                                                                                                                                                    let mut v315 = v315.into_context_iter();
                                                                                                                                                                                                                                                                                    while let Some(v316) = v315.next(ctx) {
                                                                                                                                                                                                                                                                                        if v316.0 == I64 {
                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                opcode: ref v319,
                                                                                                                                                                                                                                                                                                args: ref v320,
                                                                                                                                                                                                                                                                                            } = &v316.1 {
                                                                                                                                                                                                                                                                                                if let &Opcode::Ishl = v319 {
                                                                                                                                                                                                                                                                                                    let v321 = C::unpack_value_array_2(ctx, v320);
                                                                                                                                                                                                                                                                                                    let v481 = C::unpack_value_array_2(ctx, v480);
                                                                                                                                                                                                                                                                                                    if v321.0 == v481.0 {
                                                                                                                                                                                                                                                                                                        let mut v324 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v321.1, &mut v324);
                                                                                                                                                                                                                                                                                                        let mut v324 = v324.into_context_iter();
                                                                                                                                                                                                                                                                                                        while let Some(v325) = v324.next(ctx) {
                                                                                                                                                                                                                                                                                                            if v325.0 == I64 {
                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                    opcode: ref v328,
                                                                                                                                                                                                                                                                                                                    imm: v329,
                                                                                                                                                                                                                                                                                                                } = &v325.1 {
                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v328 {
                                                                                                                                                                                                                                                                                                                        let v330 = C::u64_from_imm64(ctx, v329);
                                                                                                                                                                                                                                                                                                                        if v330 == 0x38 {
                                                                                                                                                                                                                                                                                                                            let v333 = C::unpack_value_array_2(ctx, v332);
                                                                                                                                                                                                                                                                                                                            let mut v336 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v333.0, &mut v336);
                                                                                                                                                                                                                                                                                                                            let mut v336 = v336.into_context_iter();
                                                                                                                                                                                                                                                                                                                            while let Some(v337) = v336.next(ctx) {
                                                                                                                                                                                                                                                                                                                                if v337.0 == I64 {
                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                        opcode: ref v340,
                                                                                                                                                                                                                                                                                                                                        args: ref v341,
                                                                                                                                                                                                                                                                                                                                    } = &v337.1 {
                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v340 {
                                                                                                                                                                                                                                                                                                                                            let v342 = C::unpack_value_array_2(ctx, v341);
                                                                                                                                                                                                                                                                                                                                            if v321.0 == v342.0 {
                                                                                                                                                                                                                                                                                                                                                let mut v345 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v342.1, &mut v345);
                                                                                                                                                                                                                                                                                                                                                let mut v345 = v345.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                while let Some(v346) = v345.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                    if v346.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                            opcode: ref v349,
                                                                                                                                                                                                                                                                                                                                                            imm: v350,
                                                                                                                                                                                                                                                                                                                                                        } = &v346.1 {
                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v349 {
                                                                                                                                                                                                                                                                                                                                                                let v351 = C::u64_from_imm64(ctx, v350);
                                                                                                                                                                                                                                                                                                                                                                if v351 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                    let mut v352 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v333.1, &mut v352);
                                                                                                                                                                                                                                                                                                                                                                    let mut v352 = v352.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                    while let Some(v353) = v352.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                        if v353.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v356,
                                                                                                                                                                                                                                                                                                                                                                                imm: v357,
                                                                                                                                                                                                                                                                                                                                                                            } = &v353.1 {
                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v356 {
                                                                                                                                                                                                                                                                                                                                                                                    let v358 = C::u64_from_imm64(ctx, v357);
                                                                                                                                                                                                                                                                                                                                                                                    if v358 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                        let mut v359 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v258.0, &mut v359);
                                                                                                                                                                                                                                                                                                                                                                                        let mut v359 = v359.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v360) = v359.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                            if v360.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v363,
                                                                                                                                                                                                                                                                                                                                                                                                    args: ref v364,
                                                                                                                                                                                                                                                                                                                                                                                                } = &v360.1 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Band = v363 {
                                                                                                                                                                                                                                                                                                                                                                                                        let v365 = C::unpack_value_array_2(ctx, v364);
                                                                                                                                                                                                                                                                                                                                                                                                        if v321.0 == v365.0 {
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v368 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v365.1, &mut v368);
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v368 = v368.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v369) = v368.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                if v369.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v372,
                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v373,
                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v369.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v372 {
                                                                                                                                                                                                                                                                                                                                                                                                                            let v374 = C::u64_from_imm64(ctx, v373);
                                                                                                                                                                                                                                                                                                                                                                                                                            if v374 == 0xFF0000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v377 = C::unpack_value_array_2(ctx, v376);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v380 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v377.0, &mut v380);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v380 = v380.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v381) = v380.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if v381.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v384,
                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v385,
                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v381.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v384 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let v386 = C::unpack_value_array_2(ctx, v385);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if v321.0 == v386.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v389 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v386.1, &mut v389);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v389 = v389.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v390) = v389.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v390.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v393,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v394,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v390.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v393 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v395 = C::u64_from_imm64(ctx, v394);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v395 == 0xFF000000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v396 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v377.1, &mut v396);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v396 = v396.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v397) = v396.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v397.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v400,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v401,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v397.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v400 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v402 = C::u64_from_imm64(ctx, v401);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v402 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v403 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v290.0, &mut v403);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v403 = v403.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v404) = v403.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v404.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v407,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v408,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v404.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Ushr = v407 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v409 = C::unpack_value_array_2(ctx, v408);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v321.0 == v409.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v412 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v409.1, &mut v412);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v412 = v412.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v413) = v412.next(ctx) {
if v413.0 == I64 {
if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v416,
imm: v417,
} = &v413.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v416 {
let v418 = C::u64_from_imm64(ctx, v417);
if v418 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v421 = C::unpack_value_array_2(ctx, v420);
let mut v424 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v421.0, &mut v424);
let mut v424 = v424.into_context_iter();
while let Some(v425) = v424.next(ctx) {
if v425.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v428,
args: ref v429,
} = &v425.1 {
if let &Opcode::Ushr = v428 {
let v430 = C::unpack_value_array_2(ctx, v429);
if v321.0 == v430.0 {
let mut v433 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v430.1, &mut v433);
let mut v433 = v433.into_context_iter();
while let Some(v434) = v433.next(ctx) {
if v434.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v437,
imm: v438,
} = &v434.1 {
if let &Opcode::Iconst = v437 {
let v439 = C::u64_from_imm64(ctx, v438);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v439 == 0x18 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v440 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v421.1, &mut v440);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v440 = v440.into_context_iter();
while let Some(v441) = v440.next(ctx) {
if v441.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v444,
imm: v445,
} = &v441.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v444 {
let v446 = C::u64_from_imm64(ctx, v445);
if v446 == 0xFF0000 {
let mut v447 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v115.0, &mut v447);
let mut v447 = v447.into_context_iter();
while let Some(v448) = v447.next(ctx) {
if v448.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v451,
args: ref v452,
} = &v448.1 {
if let &Opcode::Band = v451 {
let v453 = C::unpack_value_array_2(ctx, v452);
let mut v456 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v453.0, &mut v456);
let mut v456 = v456.into_context_iter();
while let Some(v457) = v456.next(ctx) {
if v457.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v460,
args: ref v461,
} = &v457.1 {
if let &Opcode::Ushr = v460 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v462 = C::unpack_value_array_2(ctx, v461);
if v321.0 == v462.0 {
let mut v465 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v462.1, &mut v465);
let mut v465 = v465.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v466) = v465.next(ctx) {
if v466.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v469,
imm: v470,
} = &v466.1 {
if let &Opcode::Iconst = v469 {
let v471 = C::u64_from_imm64(ctx, v470);
if v471 == 0x28 {
let mut v472 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v453.1, &mut v472);
let mut v472 = v472.into_context_iter();
while let Some(v473) = v472.next(ctx) {
if v473.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v476,
imm: v477,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v473.1 {
if let &Opcode::Iconst = v476 {
let v478 = C::u64_from_imm64(ctx, v477);
if v478 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v484 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v481.1, &mut v484);
let mut v484 = v484.into_context_iter();
while let Some(v485) = v484.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v485.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v488,
imm: v489,
} = &v485.1 {
if let &Opcode::Iconst = v488 {
let v490 = C::u64_from_imm64(ctx, v489);
if v490 == 0x38 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v491 = constructor_bswap(ctx, v2.0, v321.0);
ule at src/opts/bitops.isle line 161.
returns.extend(Some(v491));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        &Opcode::Ushr => {
                                                                            if v2.0 == I32 {
                                                                                if v11.0 == I32 {
                                                                                    if v19.0 == I32
                                                                                    {
                                                                                        if v110.0
                                                                                            == I32
                                                                                        {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I32 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Ishl = v131 {
                                                                                                            let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                            if v115.0 == v133.0 {
                                                                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                                                let mut v167 = v167.into_context_iter();
                                                                                                                while let Some(v168) = v167.next(ctx) {
                                                                                                                    if v168.0 == I32 {
                                                                                                                        if let &InstructionData::Binary {
                                                                                                                            opcode: ref v247,
                                                                                                                            args: ref v248,
                                                                                                                        } = &v168.1 {
                                                                                                                            if let &Opcode::Ishl = v247 {
                                                                                                                                let mut v240 = C::inst_data_etor_returns::default();
                                                                                                                                C::inst_data_etor(ctx, v133.1, &mut v240);
                                                                                                                                let mut v240 = v240.into_context_iter();
                                                                                                                                while let Some(v241) = v240.next(ctx) {
                                                                                                                                    if v241.0 == I32 {
                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                            opcode: ref v244,
                                                                                                                                            imm: v245,
                                                                                                                                        } = &v241.1 {
                                                                                                                                            if let &Opcode::Iconst = v244 {
                                                                                                                                                let v246 = C::u64_from_imm64(ctx, v245);
                                                                                                                                                if v246 == 0x18 {
                                                                                                                                                    let v249 = C::unpack_value_array_2(ctx, v248);
                                                                                                                                                    let mut v252 = C::inst_data_etor_returns::default();
                                                                                                                                                    C::inst_data_etor(ctx, v249.0, &mut v252);
                                                                                                                                                    let mut v252 = v252.into_context_iter();
                                                                                                                                                    while let Some(v253) = v252.next(ctx) {
                                                                                                                                                        if v253.0 == I32 {
                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                opcode: ref v256,
                                                                                                                                                                args: ref v257,
                                                                                                                                                            } = &v253.1 {
                                                                                                                                                                if let &Opcode::Band = v256 {
                                                                                                                                                                    let v258 = C::unpack_value_array_2(ctx, v257);
                                                                                                                                                                    if v115.0 == v258.0 {
                                                                                                                                                                        let mut v261 = C::inst_data_etor_returns::default();
                                                                                                                                                                        C::inst_data_etor(ctx, v258.1, &mut v261);
                                                                                                                                                                        let mut v261 = v261.into_context_iter();
                                                                                                                                                                        while let Some(v262) = v261.next(ctx) {
                                                                                                                                                                            if v262.0 == I32 {
                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                    opcode: ref v265,
                                                                                                                                                                                    imm: v266,
                                                                                                                                                                                } = &v262.1 {
                                                                                                                                                                                    if let &Opcode::Iconst = v265 {
                                                                                                                                                                                        let v267 = C::u64_from_imm64(ctx, v266);
                                                                                                                                                                                        if v267 == 0xFF00 {
                                                                                                                                                                                            let mut v268 = C::inst_data_etor_returns::default();
                                                                                                                                                                                            C::inst_data_etor(ctx, v249.1, &mut v268);
                                                                                                                                                                                            let mut v268 = v268.into_context_iter();
                                                                                                                                                                                            while let Some(v269) = v268.next(ctx) {
                                                                                                                                                                                                if v269.0 == I32 {
                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                        opcode: ref v272,
                                                                                                                                                                                                        imm: v273,
                                                                                                                                                                                                    } = &v269.1 {
                                                                                                                                                                                                        if let &Opcode::Iconst = v272 {
                                                                                                                                                                                                            let v274 = C::u64_from_imm64(ctx, v273);
                                                                                                                                                                                                            if v274 == 0x8 {
                                                                                                                                                                                                                let mut v275 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v275);
                                                                                                                                                                                                                let mut v275 = v275.into_context_iter();
                                                                                                                                                                                                                while let Some(v276) = v275.next(ctx) {
                                                                                                                                                                                                                    if v276.0 == I32 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v279,
                                                                                                                                                                                                                            args: ref v280,
                                                                                                                                                                                                                        } = &v276.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v279 {
                                                                                                                                                                                                                                let v281 = C::unpack_value_array_2(ctx, v280);
                                                                                                                                                                                                                                let mut v284 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v281.0, &mut v284);
                                                                                                                                                                                                                                let mut v284 = v284.into_context_iter();
                                                                                                                                                                                                                                while let Some(v285) = v284.next(ctx) {
                                                                                                                                                                                                                                    if v285.0 == I32 {
                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                            opcode: ref v288,
                                                                                                                                                                                                                                            args: ref v289,
                                                                                                                                                                                                                                        } = &v285.1 {
                                                                                                                                                                                                                                            if let &Opcode::Ushr = v288 {
                                                                                                                                                                                                                                                let v290 = C::unpack_value_array_2(ctx, v289);
                                                                                                                                                                                                                                                if v115.0 == v290.0 {
                                                                                                                                                                                                                                                    let mut v293 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v290.1, &mut v293);
                                                                                                                                                                                                                                                    let mut v293 = v293.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v294) = v293.next(ctx) {
                                                                                                                                                                                                                                                        if v294.0 == I32 {
                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                opcode: ref v297,
                                                                                                                                                                                                                                                                imm: v298,
                                                                                                                                                                                                                                                            } = &v294.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v297 {
                                                                                                                                                                                                                                                                    let v299 = C::u64_from_imm64(ctx, v298);
                                                                                                                                                                                                                                                                    if v299 == 0x8 {
                                                                                                                                                                                                                                                                        let mut v300 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v281.1, &mut v300);
                                                                                                                                                                                                                                                                        let mut v300 = v300.into_context_iter();
                                                                                                                                                                                                                                                                        while let Some(v301) = v300.next(ctx) {
                                                                                                                                                                                                                                                                            if v301.0 == I32 {
                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                    opcode: ref v304,
                                                                                                                                                                                                                                                                                    imm: v305,
                                                                                                                                                                                                                                                                                } = &v301.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v304 {
                                                                                                                                                                                                                                                                                        let v306 = C::u64_from_imm64(ctx, v305);
                                                                                                                                                                                                                                                                                        if v306 == 0xFF00 {
                                                                                                                                                                                                                                                                                            let mut v307 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v115.1, &mut v307);
                                                                                                                                                                                                                                                                                            let mut v307 = v307.into_context_iter();
                                                                                                                                                                                                                                                                                            while let Some(v308) = v307.next(ctx) {
                                                                                                                                                                                                                                                                                                if v308.0 == I32 {
                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                        opcode: ref v311,
                                                                                                                                                                                                                                                                                                        imm: v312,
                                                                                                                                                                                                                                                                                                    } = &v308.1 {
                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v311 {
                                                                                                                                                                                                                                                                                                            let v313 = C::u64_from_imm64(ctx, v312);
                                                                                                                                                                                                                                                                                                            if v313 == 0x18 {
                                                                                                                                                                                                                                                                                                                let v314 = constructor_bswap(ctx, v2.0, v133.0);
                                                                                                                                                                                                                                                                                                                // Rule at src/opts/bitops.isle line 148.
                                                                                                                                                                                                                                                                                                                returns.extend(Some(v314));
                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                                &InstructionData::UnaryImm {
                                                                    opcode: ref v652,
                                                                    imm: v653,
                                                                } => {
                                                                    if let &Opcode::Iconst = v652 {
                                                                        if v2.0 == v11.0 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(
                                                                                    ctx, v124.1,
                                                                                    &mut v167,
                                                                                );
                                                                                let mut v167 = v167.into_context_iter();
                                                                                while let Some(
                                                                                    v168,
                                                                                ) =
                                                                                    v167.next(ctx)
                                                                                {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v192,
                                                                                        imm: v193,
                                                                                    } = &v168.1 {
                                                                                        if let &Opcode::Iconst = v192 {
                                                                                            let v663 = constructor_bor(ctx, v2.0, v124.0, v106.0);
                                                                                            let v664 = constructor_bor(ctx, v2.0, v124.1, v106.1);
                                                                                            let v665 = constructor_bor(ctx, v2.0, v663, v664);
                                                                                            // Rule at src/opts/cprop.isle line 239.
                                                                                            returns.extend(Some(v665));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Ushr = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v652,
                                                                                imm: v653,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v652 {
                                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                    let mut v167 = v167.into_context_iter();
                                                                                    while let Some(v168) = v167.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v192,
                                                                                            imm: v193,
                                                                                        } = &v168.1 {
                                                                                            if let &Opcode::Iconst = v192 {
                                                                                                let v194 = C::u64_from_imm64(ctx, v193);
                                                                                                let v1029 = C::lane_type(ctx, v53);
                                                                                                let v1030 = C::ty_bits_u64(ctx, v1029);
                                                                                                let v1028 = C::u64_from_imm64(ctx, v653);
                                                                                                let v1034 = C::u64_sub(ctx, v1030, v1028);
                                                                                                let v1035 = C::u64_eq(ctx, v194, v1034);
                                                                                                if v1035 == true {
                                                                                                    let v1036 = constructor_rotl(ctx, v53, v124.0, v106.1);
                                                                                                    // Rule at src/opts/shifts.isle line 281.
                                                                                                    returns.extend(Some(v1036));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Ishl = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v652,
                                                                                imm: v653,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v652 {
                                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                    let mut v167 = v167.into_context_iter();
                                                                                    while let Some(v168) = v167.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v192,
                                                                                            imm: v193,
                                                                                        } = &v168.1 {
                                                                                            if let &Opcode::Iconst = v192 {
                                                                                                let v1028 = C::u64_from_imm64(ctx, v653);
                                                                                                let v1029 = C::lane_type(ctx, v53);
                                                                                                let v1030 = C::ty_bits_u64(ctx, v1029);
                                                                                                let v194 = C::u64_from_imm64(ctx, v193);
                                                                                                let v1031 = C::u64_sub(ctx, v1030, v194);
                                                                                                let v1032 = C::u64_eq(ctx, v1028, v1031);
                                                                                                if v1032 == true {
                                                                                                    let v1033 = constructor_rotl(ctx, v53, v124.0, v124.1);
                                                                                                    // Rule at src/opts/shifts.isle line 276.
                                                                                                    returns.extend(Some(v1033));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v783,
                                    args: ref v784,
                                    cond: ref v785,
                                } => {
                                    if let &Opcode::Icmp = v783 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v753,
                                                        args: ref v754,
                                                        cond: ref v755,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Icmp = v753 {
                                                            let v789 = constructor_intcc_comparable(
                                                                ctx, v755, v785,
                                                            );
                                                            if let Some(v790) = v789 {
                                                                if v11.0 == v19.0 {
                                                                    let v756 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v754,
                                                                        );
                                                                    let v786 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v784,
                                                                        );
                                                                    if v756.0 == v786.0 {
                                                                        if v756.1 == v786.1 {
                                                                            let v791 = constructor_decompose_intcc(ctx, v755);
                                                                            let v792 = constructor_decompose_intcc(ctx, v785);
                                                                            let v795 = C::u64_or(
                                                                                ctx, v791, v792,
                                                                            );
                                                                            let v796 = constructor_compose_icmp(ctx, v493, v795, v790, v756.0, v756.1);
                                                                            // Rule at src/opts/icmp.isle line 132.
                                                                            returns
                                                                                .extend(Some(v796));
                                                                            if returns.len()
                                                                                >= MAX_ISLE_RETURNS
                                                                            {
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1048 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1049) = v1048 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1010 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1052 = constructor_bor(
                                                                        ctx, v1010, v30, v27,
                                                                    );
                                                                    let v1053 = constructor_splat(
                                                                        ctx, v2.0, v1052,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 18.
                                                                    returns.extend(Some(v1053));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v184 =
                                                            constructor_iconst_s(ctx, v53, -0x1);
                                                        let v185 = C::subsume(ctx, v184);
                                                        // Rule at src/opts/bitops.isle line 25.
                                                        returns.extend(Some(v185));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Band = v122 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                if v27 == v124.1 {
                                                                    let v190 = constructor_bor(
                                                                        ctx, v2.0, v124.0, v7.1,
                                                                    );
                                                                    // Rule at src/opts/bitops.isle line 50.
                                                                    returns.extend(Some(v190));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v672 = C::value_type(ctx, v30);
                                                        let v705 = C::value_type(ctx, v27);
                                                        if v672 == v705 {
                                                            let v708 = constructor_bor(
                                                                ctx, v672, v30, v27,
                                                            );
                                                            let v709 = constructor_uextend(
                                                                ctx, v2.0, v708,
                                                            );
                                                            // Rule at src/opts/extends.isle line 73.
                                                            returns.extend(Some(v709));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    match v122 {
                                                        &Opcode::Band => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            let v195 = C::ty_mask(ctx, v2.0);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v196 = C::u64_and(ctx, v195, v16);
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            let v197 = C::u64_not(ctx, v194);
                                                                            let v198 = C::u64_and(ctx, v195, v197);
                                                                            let v199 = C::u64_eq(ctx, v196, v198);
                                                                            if v199 == true {
                                                                                if v2.0 == v168.0 {
                                                                                    let v190 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                                    // Rule at src/opts/bitops.isle line 70.
                                                                                    returns.extend(Some(v190));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            if v2.0 == v168.0 {
                                                                                let v601 = constructor_bor(ctx, v2.0, v124.1, v7.1);
                                                                                let v602 = constructor_bor(ctx, v2.0, v124.0, v601);
                                                                                // Rule at src/opts/cprop.isle line 160.
                                                                                returns.extend(Some(v602));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v516 = C::u64_or(ctx, v24, v16);
                                                                let v517 = C::imm64_masked(
                                                                    ctx, v493, v516,
                                                                );
                                                                let v518 = constructor_iconst(
                                                                    ctx, v493, v517,
                                                                );
                                                                let v519 = C::subsume(ctx, v518);
                                                                // Rule at src/opts/cprop.isle line 35.
                                                                returns.extend(Some(v519));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 18.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v184 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v185 = C::subsume(ctx, v184);
                                                    // Rule at src/opts/bitops.isle line 26.
                                                    returns.extend(Some(v185));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v572 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 107.
                                            returns.extend(Some(v572));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 16.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 8.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Bxor = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Bxor = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v156 = constructor_bxor(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v157 = constructor_bxor(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v158 = constructor_bxor(
                                                                    ctx, v2.0, v156, v157,
                                                                );
                                                                let v159 = C::subsume(ctx, v158);
                                                                // Rule at src/opts/arithmetic.isle line 150.
                                                                returns.extend(Some(v159));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v652,
                                                        imm: v653,
                                                    } => {
                                                        if let &Opcode::Iconst = v652 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Bxor = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v192,
                                                                                    imm: v193,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v192 {
                                                                                        let v666 = constructor_bxor(ctx, v2.0, v124.0, v106.0);
                                                                                        let v667 = constructor_bxor(ctx, v2.0, v124.1, v106.1);
                                                                                        let v668 = constructor_bxor(ctx, v2.0, v666, v667);
                                                                                        // Rule at src/opts/cprop.isle line 243.
                                                                                        returns.extend(Some(v668));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1048 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1049) = v1048 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1010 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1054 = constructor_bxor(
                                                                        ctx, v1010, v30, v27,
                                                                    );
                                                                    let v1055 = constructor_splat(
                                                                        ctx, v2.0, v1054,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 22.
                                                                    returns.extend(Some(v1055));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v184 =
                                                            constructor_iconst_s(ctx, v53, -0x1);
                                                        let v185 = C::subsume(ctx, v184);
                                                        // Rule at src/opts/bitops.isle line 23.
                                                        returns.extend(Some(v185));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v672 = C::value_type(ctx, v30);
                                                        let v705 = C::value_type(ctx, v27);
                                                        if v672 == v705 {
                                                            let v710 = constructor_bxor(
                                                                ctx, v672, v30, v27,
                                                            );
                                                            let v711 = constructor_uextend(
                                                                ctx, v2.0, v710,
                                                            );
                                                            // Rule at src/opts/extends.isle line 75.
                                                            returns.extend(Some(v711));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bxor = v122 {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let mut v167 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v124.1, &mut v167,
                                                            );
                                                            let mut v167 = v167.into_context_iter();
                                                            while let Some(v168) = v167.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v192,
                                                                    imm: v193,
                                                                } = &v168.1 {
                                                                    if let &Opcode::Iconst = v192 {
                                                                        if v2.0 == v168.0 {
                                                                            let v605 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                                            let v606 = constructor_bxor(ctx, v2.0, v124.0, v605);
                                                                            // Rule at src/opts/cprop.isle line 166.
                                                                            returns.extend(Some(v606));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v11.0 == v493 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v524 =
                                                                    C::u64_xor(ctx, v24, v16);
                                                                let v525 = C::imm64_masked(
                                                                    ctx, v493, v524,
                                                                );
                                                                let v526 = constructor_iconst(
                                                                    ctx, v493, v525,
                                                                );
                                                                let v527 = C::subsume(ctx, v526);
                                                                // Rule at src/opts/cprop.isle line 47.
                                                                returns.extend(Some(v527));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 22.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Bxor = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Bxor = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v160 = constructor_bxor(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v161 = constructor_bxor(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v162 = constructor_bxor(
                                                                ctx, v2.0, v160, v161,
                                                            );
                                                            let v163 = C::subsume(ctx, v162);
                                                            // Rule at src/opts/arithmetic.isle line 152.
                                                            returns.extend(Some(v163));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v184 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v185 = C::subsume(ctx, v184);
                                                    // Rule at src/opts/bitops.isle line 24.
                                                    returns.extend(Some(v185));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v574 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 113.
                                            returns.extend(Some(v574));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v805 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 20.
                                        returns.extend(Some(v805));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src/opts/bitops.isle line 18.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS {
                                    return;
                                }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v200 = constructor_bnot(ctx, v2.0, v7.0);
                                        // Rule at src/opts/bitops.isle line 78.
                                        returns.extend(Some(v200));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1006 = constructor_rotl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 143.
                                        returns.extend(Some(v1006));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v705 = C::value_type(ctx, v27);
                                            let v995 = C::fits_in_64(ctx, v705);
                                            if let Some(v996) = v995 {
                                                let v1001 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 127.
                                                returns.extend(Some(v1001));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1001 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 128.
                                            returns.extend(Some(v1001));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1001 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 129.
                                            returns.extend(Some(v1001));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1
                                            {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1020 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1021 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1020,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 240.
                                                            returns.extend(Some(v1021));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1023 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1025 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1023,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 247.
                                                            returns.extend(Some(v1025));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 20.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1008 = C::u64_and(ctx, v16, v201);
                                        let v1037 = C::u64_eq(ctx, v16, v1008);
                                        if v1037 == false {
                                            let v1038 = constructor_iconst_u(ctx, v11.0, v1008);
                                            let v1043 = constructor_rotl(ctx, v2.0, v7.0, v1038);
                                            // Rule at src/opts/shifts.isle line 305.
                                            returns.extend(Some(v1043));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1026 = C::value_type(ctx, v124.1);
                                                let v1027 = C::value_type(ctx, v7.1);
                                                if v1026 == v1027 {
                                                    let v1020 =
                                                        constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1021 =
                                                        constructor_rotl(ctx, v2.0, v124.0, v1020);
                                                    // Rule at src/opts/shifts.isle line 261.
                                                    returns.extend(Some(v1021));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v192,
                                                        imm: v193,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v192 {
                                                            let v1020 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1021 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1020,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 239.
                                                            returns.extend(Some(v1021));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1019 = C::subsume(ctx, v124.0);
                                                    // Rule at src/opts/shifts.isle line 204.
                                                    returns.extend(Some(v1019));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v1026 = C::value_type(ctx, v124.1);
                                                let v1027 = C::value_type(ctx, v7.1);
                                                if v1026 == v1027 {
                                                    let v1023 =
                                                        constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1025 =
                                                        constructor_rotr(ctx, v2.0, v124.0, v1023);
                                                    // Rule at src/opts/shifts.isle line 266.
                                                    returns.extend(Some(v1025));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v192,
                                                        imm: v193,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v192 {
                                                            let v1023 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1025 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1023,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 246.
                                                            returns.extend(Some(v1025));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1010 = C::lane_type(ctx, v2.0);
                                            let v1082 = constructor_rotl(ctx, v1010, v30, v7.1);
                                            let v1083 = constructor_splat(ctx, v2.0, v1082);
                                            // Rule at src/opts/vector.isle line 68.
                                            returns.extend(Some(v1083));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1005 = constructor_rotr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 142.
                                        returns.extend(Some(v1005));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v705 = C::value_type(ctx, v27);
                                            let v995 = C::fits_in_64(ctx, v705);
                                            if let Some(v996) = v995 {
                                                let v1000 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 124.
                                                returns.extend(Some(v1000));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1000 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 125.
                                            returns.extend(Some(v1000));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1000 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 126.
                                            returns.extend(Some(v1000));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1
                                            {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1023 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1024 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1023,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 245.
                                                            returns.extend(Some(v1024));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1020 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1022 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1020,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 242.
                                                            returns.extend(Some(v1022));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 16.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1008 = C::u64_and(ctx, v16, v201);
                                        let v1037 = C::u64_eq(ctx, v16, v1008);
                                        if v1037 == false {
                                            let v1038 = constructor_iconst_u(ctx, v11.0, v1008);
                                            let v1042 = constructor_rotr(ctx, v2.0, v7.0, v1038);
                                            // Rule at src/opts/shifts.isle line 302.
                                            returns.extend(Some(v1042));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1019 = C::subsume(ctx, v124.0);
                                                    // Rule at src/opts/shifts.isle line 205.
                                                    returns.extend(Some(v1019));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v1026 = C::value_type(ctx, v124.1);
                                                let v1027 = C::value_type(ctx, v7.1);
                                                if v1026 == v1027 {
                                                    let v1023 =
                                                        constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1024 =
                                                        constructor_rotl(ctx, v2.0, v124.0, v1023);
                                                    // Rule at src/opts/shifts.isle line 264.
                                                    returns.extend(Some(v1024));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v192,
                                                        imm: v193,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v192 {
                                                            let v1023 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1024 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1023,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 244.
                                                            returns.extend(Some(v1024));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1026 = C::value_type(ctx, v124.1);
                                                let v1027 = C::value_type(ctx, v7.1);
                                                if v1026 == v1027 {
                                                    let v1020 =
                                                        constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1022 =
                                                        constructor_rotr(ctx, v2.0, v124.0, v1020);
                                                    // Rule at src/opts/shifts.isle line 259.
                                                    returns.extend(Some(v1022));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v192,
                                                        imm: v193,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v192 {
                                                            let v1020 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1022 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1020,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 241.
                                                            returns.extend(Some(v1022));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1010 = C::lane_type(ctx, v2.0);
                                            let v1084 = constructor_rotr(ctx, v1010, v30, v7.1);
                                            let v1085 = constructor_splat(ctx, v2.0, v1084);
                                            // Rule at src/opts/vector.isle line 71.
                                            returns.extend(Some(v1085));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1002 = constructor_ishl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 139.
                                        returns.extend(Some(v1002));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v705 = C::value_type(ctx, v27);
                                            let v995 = C::fits_in_64(ctx, v705);
                                            if let Some(v996) = v995 {
                                                let v997 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 115.
                                                returns.extend(Some(v997));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v997 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 116.
                                            returns.extend(Some(v997));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v997 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 117.
                                            returns.extend(Some(v997));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1007 = C::u64_and(ctx, v194, v201);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1008 = C::u64_and(ctx, v16, v201);
                                                                            let v1009 = C::u64_add(ctx, v1007, v1008);
                                                                            let v1010 = C::lane_type(ctx, v2.0);
                                                                            let v1011 = C::ty_bits_u64(ctx, v1010);
                                                                            let v1012 = C::u64_lt(ctx, v1009, v1011);
                                                                            if v1012 == true {
                                                                                let v1013 = constructor_iconst_u(ctx, v168.0, v1009);
                                                                                let v1014 = constructor_ishl(ctx, v2.0, v124.0, v1013);
                                                                                // Rule at src/opts/shifts.isle line 152.
                                                                                returns.extend(Some(v1014));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v971 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1017 = C::u64_le(ctx, v971, v1009);
                                                                            if v1017 == true {
                                                                                let v681 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v1018 = C::subsume(ctx, v681);
                                                                                // Rule at src/opts/shifts.isle line 184.
                                                                                returns.extend(Some(v1018));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v583,
                                                                        imm: v584,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v583 {
                                                                            let v646 = constructor_ishl(ctx, v2.0, v124.0, v7.1);
                                                                            let v647 = constructor_ishl(ctx, v2.0, v646, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 214.
                                                                            returns.extend(Some(v647));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v492 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v493) = v492 {
                                                                if v19.0 == v493 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v192,
                                                                            imm: v193,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v192 {
                                                                                if v15 == v193 {
                                                                                    let v962 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v963 = C::imm64_shl(ctx, v493, v962, v193);
                                                                                    let v964 = constructor_iconst(ctx, v493, v963);
                                                                                    let v965 = constructor_band(ctx, v493, v124.0, v964);
                                                                                    // Rule at src/opts/shifts.isle line 27.
                                                                                    returns.extend(Some(v965));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v492 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v493) = v492 {
                                                                if v19.0 == v493 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v192,
                                                                            imm: v193,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v192 {
                                                                                if v15 == v193 {
                                                                                    let v962 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v963 = C::imm64_shl(ctx, v493, v962, v193);
                                                                                    let v964 = constructor_iconst(ctx, v493, v963);
                                                                                    let v965 = constructor_band(ctx, v493, v124.0, v964);
                                                                                    // Rule at src/opts/shifts.isle line 32.
                                                                                    returns.extend(Some(v965));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v492 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v493) = v492 {
                                                            if v19.0 == v493 {
                                                                let v535 = C::imm64_shl(
                                                                    ctx, v493, v23, v15,
                                                                );
                                                                let v536 = constructor_iconst(
                                                                    ctx, v493, v535,
                                                                );
                                                                let v537 = C::subsume(ctx, v536);
                                                                // Rule at src/opts/cprop.isle line 58.
                                                                returns.extend(Some(v537));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1008 = C::u64_and(ctx, v16, v201);
                                        let v1037 = C::u64_eq(ctx, v16, v1008);
                                        if v1037 == false {
                                            let v1038 = constructor_iconst_u(ctx, v11.0, v1008);
                                            let v1039 = constructor_ishl(ctx, v2.0, v7.0, v1038);
                                            // Rule at src/opts/shifts.isle line 293.
                                            returns.extend(Some(v1039));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1010 = C::lane_type(ctx, v2.0);
                                        let v1086 = constructor_ishl(ctx, v1010, v30, v7.1);
                                        let v1087 = constructor_splat(ctx, v2.0, v1086);
                                        // Rule at src/opts/vector.isle line 74.
                                        returns.extend(Some(v1087));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1003 = constructor_ushr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 140.
                                        returns.extend(Some(v1003));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v705 = C::value_type(ctx, v27);
                                            let v995 = C::fits_in_64(ctx, v705);
                                            if let Some(v996) = v995 {
                                                let v998 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 118.
                                                returns.extend(Some(v998));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v998 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 119.
                                            returns.extend(Some(v998));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v998 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 120.
                                            returns.extend(Some(v998));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v174 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v175) = v174 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v164,
                                                                            arg: v165,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Uextend = v164 {
                                                                                let v166 = C::value_type(ctx, v165);
                                                                                let v176 = C::ty_equal(ctx, v166, v175);
                                                                                if v176 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                    let v178 = C::u64_eq(ctx, v16, v177);
                                                                                    if v178 == true {
                                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                        let mut v167 = v167.into_context_iter();
                                                                                        while let Some(v168) = v167.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v171,
                                                                                                arg: v172,
                                                                                            } = &v168.1 {
                                                                                                if let &Opcode::Uextend = v171 {
                                                                                                    let v173 = C::value_type(ctx, v172);
                                                                                                    if v166 == v173 {
                                                                                                        let v181 = constructor_umulhi(ctx, v166, v165, v172);
                                                                                                        let v182 = constructor_uextend(ctx, v2.0, v181);
                                                                                                        // Rule at src/opts/arithmetic.isle line 164.
                                                                                                        returns.extend(Some(v182));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let mut v167 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v124.1, &mut v167,
                                                            );
                                                            let mut v167 = v167.into_context_iter();
                                                            while let Some(v168) = v167.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v192,
                                                                    imm: v193,
                                                                } = &v168.1 {
                                                                    if let &Opcode::Iconst = v192 {
                                                                        if v15 == v193 {
                                                                            let v492 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v493) = v492 {
                                                                                let v769 = C::ty_int(ctx, v493);
                                                                                if let Some(v770) = v769 {
                                                                                    if v19.0 == v770 {
                                                                                        let v966 = C::ty_mask(ctx, v770);
                                                                                        let v967 = C::imm64(ctx, v966);
                                                                                        let v968 = C::imm64_ushr(ctx, v770, v967, v193);
                                                                                        let v969 = constructor_iconst(ctx, v770, v968);
                                                                                        let v970 = constructor_band(ctx, v770, v124.0, v969);
                                                                                        // Rule at src/opts/shifts.isle line 41.
                                                                                        returns.extend(Some(v970));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            let v977 = C::u64_is_zero(ctx, v194);
                                                                            if v977 == false {
                                                                                let v978 = C::ty_bits(ctx, v2.0);
                                                                                let v979 = C::u8_as_u64(ctx, v978);
                                                                                let v980 = C::u64_sub(ctx, v979, v194);
                                                                                let v981 = constructor_shift_amt_to_type(ctx, v980);
                                                                                if let Some(v982) = v981 {
                                                                                    if v2.0 == v19.0 {
                                                                                        let v983 = constructor_ireduce(ctx, v982, v124.0);
                                                                                        let v985 = constructor_uextend(ctx, v2.0, v983);
                                                                                        // Rule at src/opts/shifts.isle line 88.
                                                                                        returns.extend(Some(v985));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1007 = C::u64_and(ctx, v194, v201);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1008 = C::u64_and(ctx, v16, v201);
                                                                            let v1009 = C::u64_add(ctx, v1007, v1008);
                                                                            let v1010 = C::lane_type(ctx, v2.0);
                                                                            let v1011 = C::ty_bits_u64(ctx, v1010);
                                                                            let v1012 = C::u64_lt(ctx, v1009, v1011);
                                                                            if v1012 == true {
                                                                                let v1013 = constructor_iconst_u(ctx, v168.0, v1009);
                                                                                let v1015 = constructor_ushr(ctx, v2.0, v124.0, v1013);
                                                                                // Rule at src/opts/shifts.isle line 161.
                                                                                returns.extend(Some(v1015));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v971 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1017 = C::u64_le(ctx, v971, v1009);
                                                                            if v1017 == true {
                                                                                let v681 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v1018 = C::subsume(ctx, v681);
                                                                                // Rule at src/opts/shifts.isle line 193.
                                                                                returns.extend(Some(v1018));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v583,
                                                                        imm: v584,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v583 {
                                                                            let v648 = constructor_ushr(ctx, v2.0, v124.0, v7.1);
                                                                            let v649 = constructor_ushr(ctx, v2.0, v648, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 216.
                                                                            returns.extend(Some(v649));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v492 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v493) = v492 {
                                                            if v19.0 == v493 {
                                                                let v538 = C::imm64_ushr(
                                                                    ctx, v493, v23, v15,
                                                                );
                                                                let v539 = constructor_iconst(
                                                                    ctx, v493, v538,
                                                                );
                                                                let v540 = C::subsume(ctx, v539);
                                                                // Rule at src/opts/cprop.isle line 63.
                                                                returns.extend(Some(v540));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1008 = C::u64_and(ctx, v16, v201);
                                        let v1037 = C::u64_eq(ctx, v16, v1008);
                                        if v1037 == false {
                                            let v1038 = constructor_iconst_u(ctx, v11.0, v1008);
                                            let v1040 = constructor_ushr(ctx, v2.0, v7.0, v1038);
                                            // Rule at src/opts/shifts.isle line 296.
                                            returns.extend(Some(v1040));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1010 = C::lane_type(ctx, v2.0);
                                        let v1088 = constructor_ushr(ctx, v1010, v30, v7.1);
                                        let v1089 = constructor_splat(ctx, v2.0, v1088);
                                        // Rule at src/opts/vector.isle line 77.
                                        returns.extend(Some(v1089));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1004 = constructor_sshr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 141.
                                        returns.extend(Some(v1004));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v705 = C::value_type(ctx, v27);
                                            let v995 = C::fits_in_64(ctx, v705);
                                            if let Some(v996) = v995 {
                                                let v999 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 121.
                                                returns.extend(Some(v999));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v999 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 122.
                                            returns.extend(Some(v999));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v999 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 123.
                                            returns.extend(Some(v999));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v174 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v175) = v174 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v164,
                                                                            arg: v165,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Sextend = v164 {
                                                                                let v166 = C::value_type(ctx, v165);
                                                                                let v176 = C::ty_equal(ctx, v166, v175);
                                                                                if v176 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                    let v178 = C::u64_eq(ctx, v16, v177);
                                                                                    if v178 == true {
                                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                        let mut v167 = v167.into_context_iter();
                                                                                        while let Some(v168) = v167.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v171,
                                                                                                arg: v172,
                                                                                            } = &v168.1 {
                                                                                                if let &Opcode::Sextend = v171 {
                                                                                                    let v173 = C::value_type(ctx, v172);
                                                                                                    if v166 == v173 {
                                                                                                        let v179 = constructor_smulhi(ctx, v166, v165, v172);
                                                                                                        let v180 = constructor_sextend(ctx, v2.0, v179);
                                                                                                        // Rule at src/opts/arithmetic.isle line 158.
                                                                                                        returns.extend(Some(v180));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v201 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v202 = C::u64_eq(ctx, v16, v201);
                                                            if v202 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v124 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v123,
                                                                            );
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.0, &mut v127,
                                                                        );
                                                                        let mut v127 = v127
                                                                            .into_context_iter();
                                                                        while let Some(v128) =
                                                                            v127.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v164,
                                                                                arg: v165,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Ineg = v164 {
                                                                                    if v2.0 == v128.0 {
                                                                                        if v124.1 == v165 {
                                                                                            let v204 = constructor_bmask(ctx, v2.0, v165);
                                                                                            // Rule at src/opts/bitops.isle line 89.
                                                                                            returns.extend(Some(v204));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.1, &mut v167,
                                                                        );
                                                                        let mut v167 = v167
                                                                            .into_context_iter();
                                                                        while let Some(v168) =
                                                                            v167.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v171,
                                                                                arg: v172,
                                                                            } = &v168.1 {
                                                                                if let &Opcode::Ineg = v171 {
                                                                                    if v124.0 == v172 {
                                                                                        if v2.0 == v168.0 {
                                                                                            let v203 = constructor_bmask(ctx, v2.0, v124.0);
                                                                                            // Rule at src/opts/bitops.isle line 85.
                                                                                            returns.extend(Some(v203));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            if v16 == v194 {
                                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                let mut v127 = v127.into_context_iter();
                                                                                while let Some(v128) = v127.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v164,
                                                                                        arg: v165,
                                                                                    } = &v128.1 {
                                                                                        match v164 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v128.0 {
                                                                                                    let v971 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v166 = C::value_type(ctx, v165);
                                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                                    let v972 = C::u64_sub(ctx, v971, v177);
                                                                                                    let v973 = C::u64_eq(ctx, v194, v972);
                                                                                                    if v973 == true {
                                                                                                        let v974 = constructor_sextend(ctx, v2.0, v165);
                                                                                                        // Rule at src/opts/shifts.isle line 50.
                                                                                                        returns.extend(Some(v974));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                    let v975 = C::u64_lt(ctx, v194, v972);
                                                                                                    if v975 == true {
                                                                                                        // Rule at src/opts/shifts.isle line 61.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v971 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v166 = C::value_type(ctx, v165);
                                                                                                let v177 = C::ty_bits_u64(ctx, v166);
                                                                                                let v972 = C::u64_sub(ctx, v971, v177);
                                                                                                let v976 = C::u64_le(ctx, v194, v972);
                                                                                                if v976 == true {
                                                                                                    if v2.0 == v128.0 {
                                                                                                        // Rule at src/opts/shifts.isle line 71.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if v15 == v193 {
                                                                                let v977 = C::u64_is_zero(ctx, v194);
                                                                                if v977 == false {
                                                                                    let v978 = C::ty_bits(ctx, v2.0);
                                                                                    let v979 = C::u8_as_u64(ctx, v978);
                                                                                    let v980 = C::u64_sub(ctx, v979, v194);
                                                                                    let v981 = constructor_shift_amt_to_type(ctx, v980);
                                                                                    if let Some(v982) = v981 {
                                                                                        let v983 = constructor_ireduce(ctx, v982, v124.0);
                                                                                        let v984 = constructor_sextend(ctx, v2.0, v983);
                                                                                        // Rule at src/opts/shifts.isle line 84.
                                                                                        returns.extend(Some(v984));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v583,
                                                                        imm: v584,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v583 {
                                                                            let v650 = constructor_sshr(ctx, v2.0, v124.0, v7.1);
                                                                            let v651 = constructor_sshr(ctx, v2.0, v650, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 218.
                                                                            returns.extend(Some(v651));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v192,
                                                                        imm: v193,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v192 {
                                                                            let v194 = C::u64_from_imm64(ctx, v193);
                                                                            let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1007 = C::u64_and(ctx, v194, v201);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1008 = C::u64_and(ctx, v16, v201);
                                                                            let v1009 = C::u64_add(ctx, v1007, v1008);
                                                                            let v1010 = C::lane_type(ctx, v2.0);
                                                                            let v1011 = C::ty_bits_u64(ctx, v1010);
                                                                            let v1012 = C::u64_lt(ctx, v1009, v1011);
                                                                            if v1012 == true {
                                                                                let v1013 = constructor_iconst_u(ctx, v168.0, v1009);
                                                                                let v1016 = constructor_sshr(ctx, v2.0, v124.0, v1013);
                                                                                // Rule at src/opts/shifts.isle line 170.
                                                                                returns.extend(Some(v1016));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v492 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v493) = v492 {
                                                            if v19.0 == v493 {
                                                                let v541 = C::imm64_sshr(
                                                                    ctx, v493, v23, v15,
                                                                );
                                                                let v542 = constructor_iconst(
                                                                    ctx, v493, v541,
                                                                );
                                                                let v543 = C::subsume(ctx, v542);
                                                                // Rule at src/opts/cprop.isle line 68.
                                                                returns.extend(Some(v543));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v201 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1008 = C::u64_and(ctx, v16, v201);
                                        let v1037 = C::u64_eq(ctx, v16, v1008);
                                        if v1037 == false {
                                            let v1038 = constructor_iconst_u(ctx, v11.0, v1008);
                                            let v1041 = constructor_sshr(ctx, v2.0, v7.0, v1038);
                                            // Rule at src/opts/shifts.isle line 299.
                                            returns.extend(Some(v1041));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1010 = C::lane_type(ctx, v2.0);
                                        let v1090 = constructor_sshr(ctx, v1010, v30, v7.1);
                                        let v1091 = constructor_splat(ctx, v2.0, v1090);
                                        // Rule at src/opts/vector.isle line 80.
                                        returns.extend(Some(v1091));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Fneg = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Fneg = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v103 =
                                                            constructor_fmul(ctx, v2.0, v30, v27);
                                                        // Rule at src/opts/arithmetic.isle line 114.
                                                        returns.extend(Some(v103));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v219,
                args: ref v220,
                cond: ref v221,
            } => {
                if let &Opcode::Icmp = v219 {
                    match v221 {
                        &IntCC::Equal => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v559 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.0, &mut v559);
                            let mut v559 = v559.into_context_iter();
                            while let Some(v560) = v559.next(ctx) {
                                match &v560.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v926,
                                        args: ref v927,
                                    } => {
                                        if let &Opcode::Isub = v926 {
                                            if v560.0 == I8 {
                                                let mut v684 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                                                let mut v684 = v684.into_context_iter();
                                                while let Some(v685) = v684.next(ctx) {
                                                    let v686 = C::iconst_sextend_etor(ctx, v685);
                                                    if let Some(v687) = v686 {
                                                        match v687.1 {
                                                            -0x1 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v953 = constructor_slt(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 179.
                                                                                                                returns.extend(Some(v953));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v954 = constructor_ult(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 181.
                                                                                                                returns.extend(Some(v954));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v951 = constructor_eq(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 146.
                                                                                                                returns.extend(Some(v951));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v951 = constructor_eq(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 148.
                                                                                                                returns.extend(Some(v951));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v957 = constructor_sgt(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 187.
                                                                                                                returns.extend(Some(v957));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v958 = constructor_ugt(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 189.
                                                                                                                returns.extend(Some(v958));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v678,
                                        arg: v679,
                                    } => {
                                        if let &Opcode::Sextend = v678 {
                                            let mut v684 =
                                                C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                                            let mut v684 = v684.into_context_iter();
                                            while let Some(v685) = v684.next(ctx) {
                                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                                if let Some(v687) = v686 {
                                                    if v687.1 == 0x0 {
                                                        let v680 = C::value_type(ctx, v679);
                                                        let v691 =
                                                            constructor_iconst_s(ctx, v680, 0x0);
                                                        let v692 =
                                                            constructor_eq(ctx, v680, v679, v691);
                                                        // Rule at src/opts/extends.isle line 40.
                                                        returns.extend(Some(v692));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v723 = constructor_iconst_u(ctx, v53, 0x1);
                                    // Rule at src/opts/icmp.isle line 5.
                                    returns.extend(Some(v723));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        if v231 == 0x0 {
                                            let mut v724 = C::uextend_maybe_etor_returns::default();
                                            C::uextend_maybe_etor(ctx, v222.0, &mut v724);
                                            let mut v724 = v724.into_context_iter();
                                            while let Some(v725) = v724.next(ctx) {
                                                let mut v728 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v725.1, &mut v728);
                                                let mut v728 = v728.into_context_iter();
                                                while let Some(v729) = v728.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v732,
                                                        args: ref v733,
                                                        cond: ref v734,
                                                    } = &v729.1
                                                    {
                                                        if let &Opcode::Icmp = v732 {
                                                            if v2.0 == v729.0 {
                                                                let v739 =
                                                                    &C::intcc_complement(ctx, v734);
                                                                let v735 = C::unpack_value_array_2(
                                                                    ctx, v733,
                                                                );
                                                                let v740 = constructor_icmp(
                                                                    ctx, v2.0, v739, v735.0, v735.1,
                                                                );
                                                                let v741 = C::subsume(ctx, v740);
                                                                // Rule at src/opts/icmp.isle line 22.
                                                                returns.extend(Some(v741));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v559 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.0, &mut v559);
                            let mut v559 = v559.into_context_iter();
                            while let Some(v560) = v559.next(ctx) {
                                match &v560.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v926,
                                        args: ref v927,
                                    } => {
                                        if let &Opcode::Isub = v926 {
                                            if v560.0 == I8 {
                                                let mut v684 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                                                let mut v684 = v684.into_context_iter();
                                                while let Some(v685) = v684.next(ctx) {
                                                    let v686 = C::iconst_sextend_etor(ctx, v685);
                                                    if let Some(v687) = v686 {
                                                        match v687.1 {
                                                            -0x1 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v959 = constructor_sge(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 183.
                                                                                                                returns.extend(Some(v959));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v960 = constructor_uge(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 185.
                                                                                                                returns.extend(Some(v960));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v952 = constructor_ne(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 151.
                                                                                                                returns.extend(Some(v952));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v952 = constructor_ne(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 153.
                                                                                                                returns.extend(Some(v952));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v928 = C::unpack_value_array_2(
                                                                    ctx, v927,
                                                                );
                                                                let mut v931 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v928.0, &mut v931,
                                                                );
                                                                let mut v931 =
                                                                    v931.into_context_iter();
                                                                while let Some(v932) =
                                                                    v931.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v935,
                                                                        args: ref v936,
                                                                        cond: ref v937,
                                                                    } = &v932.1 {
                                                                        if let &Opcode::Icmp = v935 {
                                                                            match v937 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::SignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v955 = constructor_sle(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 191.
                                                                                                                returns.extend(Some(v955));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v941 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                    let mut v941 = v941.into_context_iter();
                                                                                    while let Some(v942) = v941.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v945,
                                                                                            args: ref v946,
                                                                                            cond: ref v947,
                                                                                        } = &v942.1 {
                                                                                            if let &Opcode::Icmp = v945 {
                                                                                                if let &IntCC::UnsignedLessThan = v947 {
                                                                                                    if v932.0 == v942.0 {
                                                                                                        let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                        let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                        if v938.0 == v948.0 {
                                                                                                            if v938.1 == v948.1 {
                                                                                                                let v956 = constructor_ule(ctx, v932.0, v938.0, v938.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 193.
                                                                                                                returns.extend(Some(v956));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v678,
                                        arg: v679,
                                    } => {
                                        if let &Opcode::Sextend = v678 {
                                            let mut v684 =
                                                C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                                            let mut v684 = v684.into_context_iter();
                                            while let Some(v685) = v684.next(ctx) {
                                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                                if let Some(v687) = v686 {
                                                    if v687.1 == 0x0 {
                                                        let v680 = C::value_type(ctx, v679);
                                                        let v691 =
                                                            constructor_iconst_s(ctx, v680, 0x0);
                                                        let v693 =
                                                            constructor_ne(ctx, v680, v679, v691);
                                                        // Rule at src/opts/extends.isle line 42.
                                                        returns.extend(Some(v693));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        if v231 == 0x0 {
                                            let mut v232 =
                                                ContextIterWrapper::<ConstructorVec<_>, _>::default(
                                                );
                                            constructor_truthy(ctx, v222.0, &mut v232);
                                            let mut v232 = v232.into_context_iter();
                                            while let Some(v233) = v232.next(ctx) {
                                                let v234 = C::value_type(ctx, v233);
                                                let v235 =
                                                    C::ty_int_ref_scalar_64_extract(ctx, v234);
                                                if let Some(v236) = v235 {
                                                    let v237 = constructor_iconst_u(ctx, v236, 0x0);
                                                    let v238 =
                                                        constructor_ne(ctx, v2.0, v233, v237);
                                                    // Rule at src/opts/bitops.isle line 120.
                                                    returns.extend(Some(v238));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let mut v724 = C::uextend_maybe_etor_returns::default();
                                            C::uextend_maybe_etor(ctx, v222.0, &mut v724);
                                            let mut v724 = v724.into_context_iter();
                                            while let Some(v725) = v724.next(ctx) {
                                                let mut v728 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v725.1, &mut v728);
                                                let mut v728 = v728.into_context_iter();
                                                while let Some(v729) = v728.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v732,
                                                        args: ref v733,
                                                        cond: ref v734,
                                                    } = &v729.1
                                                    {
                                                        if let &Opcode::Icmp = v732 {
                                                            if v2.0 == v729.0 {
                                                                let v738 = C::subsume(ctx, v725.1);
                                                                // Rule at src/opts/icmp.isle line 17.
                                                                returns.extend(Some(v738));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if v222.0 == v222.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    // Rule at src/opts/icmp.isle line 6.
                                    returns.extend(Some(v55));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v684 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                            let mut v684 = v684.into_context_iter();
                            while let Some(v685) = v684.next(ctx) {
                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                if let Some(v687) = v686 {
                                    match v687.1 {
                                        -0x1 => {
                                            let v800 = constructor_iconst_s(ctx, v687.0, 0x0);
                                            let v803 = constructor_sge(ctx, v2.0, v222.0, v800);
                                            // Rule at src/opts/icmp.isle line 150.
                                            returns.extend(Some(v803));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        0x0 => {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v926,
                                                        args: ref v927,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Isub = v926 {
                                                            let v928 =
                                                                C::unpack_value_array_2(ctx, v927);
                                                            let mut v931 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v928.0, &mut v931,
                                                            );
                                                            let mut v931 = v931.into_context_iter();
                                                            while let Some(v932) = v931.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v935,
                                                                    args: ref v936,
                                                                    cond: ref v937,
                                                                } = &v932.1 {
                                                                    if let &Opcode::Icmp = v935 {
                                                                        match v937 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::SignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v957 = constructor_sgt(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 167.
                                                                                                            returns.extend(Some(v957));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::UnsignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v958 = constructor_ugt(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 169.
                                                                                                            returns.extend(Some(v958));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v492 = C::fits_in_64(ctx, v2.0);
                            if let Some(v493) = v492 {
                                let v769 = C::ty_int(ctx, v493);
                                if let Some(v770) = v769 {
                                    let mut v225 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v222.1, &mut v225);
                                    let mut v225 = v225.into_context_iter();
                                    while let Some(v226) = v225.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v229,
                                            imm: v230,
                                        } = &v226.1
                                        {
                                            if let &Opcode::Iconst = v229 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                let v779 = C::ty_smin(ctx, v226.0);
                                                let v780 = C::u64_eq(ctx, v231, v779);
                                                if v780 == true {
                                                    let v774 =
                                                        constructor_ne(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 98.
                                                    returns.extend(Some(v774));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v781 = C::ty_smax(ctx, v226.0);
                                                let v782 = C::u64_eq(ctx, v231, v781);
                                                if v782 == true {
                                                    let v771 = constructor_iconst_u(ctx, v770, 0x0);
                                                    let v772 = C::subsume(ctx, v771);
                                                    // Rule at src/opts/icmp.isle line 118.
                                                    returns.extend(Some(v772));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    // Rule at src/opts/icmp.isle line 9.
                                    returns.extend(Some(v55));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            let v769 = C::ty_int(ctx, v493);
                                            if let Some(v770) = v769 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                let v779 = C::ty_smin(ctx, v226.0);
                                                let v780 = C::u64_eq(ctx, v231, v779);
                                                if v780 == true {
                                                    let v775 = constructor_iconst_u(ctx, v770, 0x1);
                                                    let v776 = C::subsume(ctx, v775);
                                                    // Rule at src/opts/icmp.isle line 103.
                                                    returns.extend(Some(v776));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v781 = C::ty_smax(ctx, v226.0);
                                                let v782 = C::u64_eq(ctx, v231, v781);
                                                if v782 == true {
                                                    let v773 =
                                                        constructor_eq(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 123.
                                                    returns.extend(Some(v773));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        if v231 == 0x0 {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v678,
                                                        arg: v679,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Uextend = v678 {
                                                            let v680 = C::value_type(ctx, v679);
                                                            if v680 == I32 {
                                                                let v683 = constructor_iconst_u(
                                                                    ctx, v2.0, 0x1,
                                                                );
                                                                // Rule at src/opts/extends.isle line 33.
                                                                returns.extend(Some(v683));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v684 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                            let mut v684 = v684.into_context_iter();
                            while let Some(v685) = v684.next(ctx) {
                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                if let Some(v687) = v686 {
                                    match v687.1 {
                                        0x0 => {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v926,
                                                        args: ref v927,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Isub = v926 {
                                                            let v928 =
                                                                C::unpack_value_array_2(ctx, v927);
                                                            let mut v931 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v928.0, &mut v931,
                                                            );
                                                            let mut v931 = v931.into_context_iter();
                                                            while let Some(v932) = v931.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v935,
                                                                    args: ref v936,
                                                                    cond: ref v937,
                                                                } = &v932.1 {
                                                                    if let &Opcode::Icmp = v935 {
                                                                        match v937 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::SignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v959 = constructor_sge(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 172.
                                                                                                            returns.extend(Some(v959));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::UnsignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v960 = constructor_uge(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 174.
                                                                                                            returns.extend(Some(v960));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v800 = constructor_iconst_s(ctx, v687.0, 0x0);
                                            let v801 = constructor_sgt(ctx, v2.0, v222.0, v800);
                                            // Rule at src/opts/icmp.isle line 144.
                                            returns.extend(Some(v801));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v723 = constructor_iconst_u(ctx, v53, 0x1);
                                    // Rule at src/opts/icmp.isle line 10.
                                    returns.extend(Some(v723));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            let v769 = C::ty_int(ctx, v493);
                                            if let Some(v770) = v769 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                let v779 = C::ty_smin(ctx, v226.0);
                                                let v780 = C::u64_eq(ctx, v231, v779);
                                                if v780 == true {
                                                    let v771 = constructor_iconst_u(ctx, v770, 0x0);
                                                    let v772 = C::subsume(ctx, v771);
                                                    // Rule at src/opts/icmp.isle line 88.
                                                    returns.extend(Some(v772));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v781 = C::ty_smax(ctx, v226.0);
                                                let v782 = C::u64_eq(ctx, v231, v781);
                                                if v782 == true {
                                                    let v774 =
                                                        constructor_ne(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 108.
                                                    returns.extend(Some(v774));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        if v231 == 0x0 {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v678,
                                                        arg: v679,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Uextend = v678 {
                                                            let v680 = C::value_type(ctx, v679);
                                                            if v680 == I32 {
                                                                let v681 = constructor_iconst_u(
                                                                    ctx, v2.0, 0x0,
                                                                );
                                                                // Rule at src/opts/extends.isle line 28.
                                                                returns.extend(Some(v681));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v684 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                            let mut v684 = v684.into_context_iter();
                            while let Some(v685) = v684.next(ctx) {
                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                if let Some(v687) = v686 {
                                    match v687.1 {
                                        0x0 => {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v926,
                                                        args: ref v927,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Isub = v926 {
                                                            let v928 =
                                                                C::unpack_value_array_2(ctx, v927);
                                                            let mut v931 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v928.0, &mut v931,
                                                            );
                                                            let mut v931 = v931.into_context_iter();
                                                            while let Some(v932) = v931.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v935,
                                                                    args: ref v936,
                                                                    cond: ref v937,
                                                                } = &v932.1 {
                                                                    if let &Opcode::Icmp = v935 {
                                                                        match v937 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::SignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v953 = constructor_slt(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 157.
                                                                                                            returns.extend(Some(v953));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::UnsignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v954 = constructor_ult(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 159.
                                                                                                            returns.extend(Some(v954));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v800 = constructor_iconst_s(ctx, v687.0, 0x0);
                                            let v802 = constructor_sle(ctx, v2.0, v222.0, v800);
                                            // Rule at src/opts/icmp.isle line 147.
                                            returns.extend(Some(v802));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    // Rule at src/opts/icmp.isle line 13.
                                    returns.extend(Some(v55));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v684 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                            let mut v684 = v684.into_context_iter();
                            while let Some(v685) = v684.next(ctx) {
                                let v686 = C::iconst_sextend_etor(ctx, v685);
                                if let Some(v687) = v686 {
                                    match v687.1 {
                                        -0x1 => {
                                            let v800 = constructor_iconst_s(ctx, v687.0, 0x0);
                                            let v804 = constructor_slt(ctx, v2.0, v222.0, v800);
                                            // Rule at src/opts/icmp.isle line 153.
                                            returns.extend(Some(v804));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        0x0 => {
                                            let mut v559 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v222.0, &mut v559);
                                            let mut v559 = v559.into_context_iter();
                                            while let Some(v560) = v559.next(ctx) {
                                                if v560.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v926,
                                                        args: ref v927,
                                                    } = &v560.1
                                                    {
                                                        if let &Opcode::Isub = v926 {
                                                            let v928 =
                                                                C::unpack_value_array_2(ctx, v927);
                                                            let mut v931 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v928.0, &mut v931,
                                                            );
                                                            let mut v931 = v931.into_context_iter();
                                                            while let Some(v932) = v931.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v935,
                                                                    args: ref v936,
                                                                    cond: ref v937,
                                                                } = &v932.1 {
                                                                    if let &Opcode::Icmp = v935 {
                                                                        match v937 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::SignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v955 = constructor_sle(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 162.
                                                                                                            returns.extend(Some(v955));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v941 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v928.1, &mut v941);
                                                                                let mut v941 = v941.into_context_iter();
                                                                                while let Some(v942) = v941.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v945,
                                                                                        args: ref v946,
                                                                                        cond: ref v947,
                                                                                    } = &v942.1 {
                                                                                        if let &Opcode::Icmp = v945 {
                                                                                            if let &IntCC::UnsignedLessThan = v947 {
                                                                                                if v932.0 == v942.0 {
                                                                                                    let v938 = C::unpack_value_array_2(ctx, v936);
                                                                                                    let v948 = C::unpack_value_array_2(ctx, v946);
                                                                                                    if v938.0 == v948.0 {
                                                                                                        if v938.1 == v948.1 {
                                                                                                            let v956 = constructor_ule(ctx, v932.0, v938.0, v938.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 164.
                                                                                                            returns.extend(Some(v956));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v492 = C::fits_in_64(ctx, v2.0);
                            if let Some(v493) = v492 {
                                let v769 = C::ty_int(ctx, v493);
                                if let Some(v770) = v769 {
                                    let mut v225 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v222.1, &mut v225);
                                    let mut v225 = v225.into_context_iter();
                                    while let Some(v226) = v225.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v229,
                                            imm: v230,
                                        } = &v226.1
                                        {
                                            if let &Opcode::Iconst = v229 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                let v779 = C::ty_smin(ctx, v226.0);
                                                let v780 = C::u64_eq(ctx, v231, v779);
                                                if v780 == true {
                                                    let v773 =
                                                        constructor_eq(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 93.
                                                    returns.extend(Some(v773));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v781 = C::ty_smax(ctx, v226.0);
                                                let v782 = C::u64_eq(ctx, v231, v781);
                                                if v782 == true {
                                                    let v775 = constructor_iconst_u(ctx, v770, 0x1);
                                                    let v776 = C::subsume(ctx, v775);
                                                    // Rule at src/opts/icmp.isle line 113.
                                                    returns.extend(Some(v776));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v723 = constructor_iconst_u(ctx, v53, 0x1);
                                    // Rule at src/opts/icmp.isle line 14.
                                    returns.extend(Some(v723));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v492 = C::fits_in_64(ctx, v2.0);
                            if let Some(v493) = v492 {
                                let v769 = C::ty_int(ctx, v493);
                                if let Some(v770) = v769 {
                                    let v222 = C::unpack_value_array_2(ctx, v220);
                                    let mut v225 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v222.1, &mut v225);
                                    let mut v225 = v225.into_context_iter();
                                    while let Some(v226) = v225.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v229,
                                            imm: v230,
                                        } = &v226.1
                                        {
                                            if let &Opcode::Iconst = v229 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                if v231 == 0x0 {
                                                    let v774 =
                                                        constructor_ne(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 60.
                                                    returns.extend(Some(v774));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v777 = C::ty_umax(ctx, v226.0);
                                                let v778 = C::u64_eq(ctx, v231, v777);
                                                if v778 == true {
                                                    let v771 = constructor_iconst_u(ctx, v770, 0x0);
                                                    let v772 = C::subsume(ctx, v771);
                                                    // Rule at src/opts/icmp.isle line 78.
                                                    returns.extend(Some(v772));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v222 = C::unpack_value_array_2(ctx, v220);
                                if v222.0 == v222.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    // Rule at src/opts/icmp.isle line 7.
                                    returns.extend(Some(v55));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        match v231 {
                                            0x0 => {
                                                let v492 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v493) = v492 {
                                                    let v769 = C::ty_int(ctx, v493);
                                                    if let Some(v770) = v769 {
                                                        let v775 =
                                                            constructor_iconst_u(ctx, v770, 0x1);
                                                        let v776 = C::subsume(ctx, v775);
                                                        // Rule at src/opts/icmp.isle line 64.
                                                        returns.extend(Some(v776));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v797 = constructor_iconst_u(ctx, v226.0, 0x0);
                                                let v798 = constructor_ne(ctx, v2.0, v222.0, v797);
                                                // Rule at src/opts/icmp.isle line 138.
                                                returns.extend(Some(v798));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            let v769 = C::ty_int(ctx, v493);
                                            if let Some(v770) = v769 {
                                                let v777 = C::ty_umax(ctx, v226.0);
                                                let v778 = C::u64_eq(ctx, v231, v777);
                                                if v778 == true {
                                                    let v773 =
                                                        constructor_eq(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 83.
                                                    returns.extend(Some(v773));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v723 = constructor_iconst_u(ctx, v53, 0x1);
                                    // Rule at src/opts/icmp.isle line 8.
                                    returns.extend(Some(v723));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v222 = C::unpack_value_array_2(ctx, v220);
                            let mut v225 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v222.1, &mut v225);
                            let mut v225 = v225.into_context_iter();
                            while let Some(v226) = v225.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v229,
                                    imm: v230,
                                } = &v226.1
                                {
                                    if let &Opcode::Iconst = v229 {
                                        let v231 = C::u64_from_imm64(ctx, v230);
                                        match v231 {
                                            0x0 => {
                                                let v492 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v493) = v492 {
                                                    let v769 = C::ty_int(ctx, v493);
                                                    if let Some(v770) = v769 {
                                                        let v771 =
                                                            constructor_iconst_u(ctx, v770, 0x0);
                                                        let v772 = C::subsume(ctx, v771);
                                                        // Rule at src/opts/icmp.isle line 52.
                                                        returns.extend(Some(v772));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v797 = constructor_iconst_u(ctx, v226.0, 0x0);
                                                let v799 = constructor_eq(ctx, v2.0, v222.0, v797);
                                                // Rule at src/opts/icmp.isle line 141.
                                                returns.extend(Some(v799));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            let v769 = C::ty_int(ctx, v493);
                                            if let Some(v770) = v769 {
                                                let v777 = C::ty_umax(ctx, v226.0);
                                                let v778 = C::u64_eq(ctx, v231, v777);
                                                if v778 == true {
                                                    let v774 =
                                                        constructor_ne(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 68.
                                                    returns.extend(Some(v774));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v222.0 == v222.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    // Rule at src/opts/icmp.isle line 11.
                                    returns.extend(Some(v55));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v492 = C::fits_in_64(ctx, v2.0);
                            if let Some(v493) = v492 {
                                let v769 = C::ty_int(ctx, v493);
                                if let Some(v770) = v769 {
                                    let v222 = C::unpack_value_array_2(ctx, v220);
                                    let mut v225 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v222.1, &mut v225);
                                    let mut v225 = v225.into_context_iter();
                                    while let Some(v226) = v225.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v229,
                                            imm: v230,
                                        } = &v226.1
                                        {
                                            if let &Opcode::Iconst = v229 {
                                                let v231 = C::u64_from_imm64(ctx, v230);
                                                if v231 == 0x0 {
                                                    let v773 =
                                                        constructor_eq(ctx, v770, v222.0, v222.1);
                                                    // Rule at src/opts/icmp.isle line 56.
                                                    returns.extend(Some(v773));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v777 = C::ty_umax(ctx, v226.0);
                                                let v778 = C::u64_eq(ctx, v231, v777);
                                                if v778 == true {
                                                    let v775 = constructor_iconst_u(ctx, v770, 0x1);
                                                    let v776 = C::subsume(ctx, v775);
                                                    // Rule at src/opts/icmp.isle line 73.
                                                    returns.extend(Some(v776));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v222 = C::unpack_value_array_2(ctx, v220);
                                if v222.0 == v222.1 {
                                    let v723 = constructor_iconst_u(ctx, v53, 0x1);
                                    // Rule at src/opts/icmp.isle line 12.
                                    returns.extend(Some(v723));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v222 = C::unpack_value_array_2(ctx, v220);
                    let mut v559 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v222.0, &mut v559);
                    let mut v559 = v559.into_context_iter();
                    while let Some(v560) = v559.next(ctx) {
                        match &v560.1 {
                            &InstructionData::Unary {
                                opcode: ref v678,
                                arg: v679,
                            } => {
                                if let &Opcode::Sextend = v678 {
                                    let v694 = &C::signed_cond_code(ctx, v221);
                                    if let Some(v695) = v694 {
                                        let mut v684 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v222.1, &mut v684);
                                        let mut v684 = v684.into_context_iter();
                                        while let Some(v685) = v684.next(ctx) {
                                            let v686 = C::iconst_sextend_etor(ctx, v685);
                                            if let Some(v687) = v686 {
                                                if v687.1 == 0x0 {
                                                    let v680 = C::value_type(ctx, v679);
                                                    let v691 = constructor_iconst_s(ctx, v680, 0x0);
                                                    let v696 = constructor_icmp(
                                                        ctx, v680, v221, v679, v691,
                                                    );
                                                    // Rule at src/opts/extends.isle line 44.
                                                    returns.extend(Some(v696));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::UnaryImm {
                                opcode: ref v563,
                                imm: v564,
                            } => {
                                if let &Opcode::Iconst = v563 {
                                    let mut v225 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v222.1, &mut v225);
                                    let mut v225 = v225.into_context_iter();
                                    while let Some(v226) = v225.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v229,
                                            imm: v230,
                                        } = &v226.1
                                        {
                                            if let &Opcode::Iconst = v229 {
                                                if v226.0 == v560.0 {
                                                    let v565 = C::imm64_icmp(
                                                        ctx, v560.0, v221, v564, v230,
                                                    );
                                                    let v566 = constructor_iconst(ctx, v2.0, v565);
                                                    let v567 = C::subsume(ctx, v566);
                                                    // Rule at src/opts/cprop.isle line 83.
                                                    returns.extend(Some(v567));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v575 = &C::intcc_swap_args(ctx, v221);
                                    let v576 = constructor_icmp(ctx, v2.0, v575, v222.1, v222.0);
                                    // Rule at src/opts/cprop.isle line 117.
                                    returns.extend(Some(v576));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v84,
                args: ref v85,
            } => {
                match v84 {
                    &Opcode::Select => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            match &v91.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v812,
                                    args: ref v813,
                                    cond: ref v814,
                                } => {
                                    if let &Opcode::Icmp = v812 {
                                        match v814 {
                                            &IntCC::Equal => {
                                                let mut v821 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v821);
                                                let mut v821 = v821.into_context_iter();
                                                while let Some(v822) = v821.next(ctx) {
                                                    if let &InstructionData::Ternary {
                                                        opcode: ref v884,
                                                        args: ref v885,
                                                    } = &v822.1
                                                    {
                                                        if let &Opcode::Select = v884 {
                                                            if v2.0 == v822.0 {
                                                                let mut v833 = C::inst_data_tupled_etor_returns::default();
                                                                C::inst_data_tupled_etor(
                                                                    ctx, v86.1, &mut v833,
                                                                );
                                                                let mut v833 =
                                                                    v833.into_context_iter();
                                                                while let Some(v834) =
                                                                    v833.next(ctx)
                                                                {
                                                                    let v835 =
                                                                        C::iconst_sextend_etor(
                                                                            ctx, v834,
                                                                        );
                                                                    if let Some(v836) = v835 {
                                                                        if v836.1 == 0x0 {
                                                                            if v2.0 == v836.0 {
                                                                                let v886 = C::unpack_value_array_3(ctx, v885);
                                                                                let mut v890 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(
                                                                                    ctx, v886.0,
                                                                                    &mut v890,
                                                                                );
                                                                                let mut v890 = v890.into_context_iter();
                                                                                while let Some(
                                                                                    v891,
                                                                                ) =
                                                                                    v890.next(ctx)
                                                                                {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v894,
                                                                                        args: ref v895,
                                                                                        cond: ref v896,
                                                                                    } = &v891.1 {
                                                                                        if let &Opcode::Icmp = v894 {
                                                                                            match v896 {
                                                                                                &IntCC::SignedGreaterThan => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == 0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == -0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 104.
                                                                                                                                                returns.extend(Some(v925));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == 0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == -0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 111.
                                                                                                                                                returns.extend(Some(v925));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThan => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == -0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == 0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 90.
                                                                                                                                                returns.extend(Some(v925));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThanOrEqual => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == -0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == 0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 97.
                                                                                                                                                returns.extend(Some(v925));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == 0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == -0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 39.
                                                                                                                                                returns.extend(Some(v883));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == 0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == -0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 46.
                                                                                                                                                returns.extend(Some(v883));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThan => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == -0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == 0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 25.
                                                                                                                                                returns.extend(Some(v883));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThanOrEqual => {
                                                                                                    if v91.0 == v891.0 {
                                                                                                        let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                        let v897 = C::unpack_value_array_2(ctx, v895);
                                                                                                        if v815.0 == v897.0 {
                                                                                                            if v815.1 == v897.1 {
                                                                                                                let mut v900 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v886.1, &mut v900);
                                                                                                                let mut v900 = v900.into_context_iter();
                                                                                                                while let Some(v901) = v900.next(ctx) {
                                                                                                                    let v902 = C::iconst_sextend_etor(ctx, v901);
                                                                                                                    if let Some(v903) = v902 {
                                                                                                                        if v903.1 == -0x1 {
                                                                                                                            if v2.0 == v903.0 {
                                                                                                                                let mut v906 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v886.2, &mut v906);
                                                                                                                                let mut v906 = v906.into_context_iter();
                                                                                                                                while let Some(v907) = v906.next(ctx) {
                                                                                                                                    let v908 = C::iconst_sextend_etor(ctx, v907);
                                                                                                                                    if let Some(v909) = v908 {
                                                                                                                                        if v909.1 == 0x1 {
                                                                                                                                            if v2.0 == v909.0 {
                                                                                                                                                let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                                                let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 32.
                                                                                                                                                returns.extend(Some(v883));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                _ => {}
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThan => {
                                                let mut v821 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v821);
                                                let mut v821 = v821.into_context_iter();
                                                while let Some(v822) = v821.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v912,
                                                        arg: v913,
                                                    } = &v822.1
                                                    {
                                                        match v912 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v822.0 {
                                                                    let mut v833 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v833,
                                                                    );
                                                                    let mut v833 =
                                                                        v833.into_context_iter();
                                                                    while let Some(v834) =
                                                                        v833.next(ctx)
                                                                    {
                                                                        let v835 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v834,
                                                                            );
                                                                        if let Some(v836) = v835 {
                                                                            if v836.1 == 0x1 {
                                                                                if v2.0 == v836.0 {
                                                                                    let mut v914 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v913, &mut v914);
                                                                                    let mut v914 = v914.into_context_iter();
                                                                                    while let Some(
                                                                                        v915,
                                                                                    ) = v914
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v918,
                                                                                            args: ref v919,
                                                                                            cond: ref v920,
                                                                                        } = &v915.1 {
                                                                                            if let &Opcode::Icmp = v918 {
                                                                                                match v920 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                    // Rule at src/opts/spaceship.isle line 130.
                                                                                                                    returns.extend(Some(v925));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                    // Rule at src/opts/spaceship.isle line 120.
                                                                                                                    returns.extend(Some(v925));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v822.0 {
                                                                    let mut v833 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v833,
                                                                    );
                                                                    let mut v833 =
                                                                        v833.into_context_iter();
                                                                    while let Some(v834) =
                                                                        v833.next(ctx)
                                                                    {
                                                                        let v835 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v834,
                                                                            );
                                                                        if let Some(v836) = v835 {
                                                                            if v836.1 == 0x1 {
                                                                                if v2.0 == v836.0 {
                                                                                    let mut v914 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v913, &mut v914);
                                                                                    let mut v914 = v914.into_context_iter();
                                                                                    while let Some(
                                                                                        v915,
                                                                                    ) = v914
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v918,
                                                                                            args: ref v919,
                                                                                            cond: ref v920,
                                                                                        } = &v915.1 {
                                                                                            if let &Opcode::Icmp = v918 {
                                                                                                match v920 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                    // Rule at src/opts/spaceship.isle line 134.
                                                                                                                    returns.extend(Some(v925));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                                    // Rule at src/opts/spaceship.isle line 124.
                                                                                                                    returns.extend(Some(v925));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 26.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.2 == v815.0 {
                                                    if v86.1 == v815.1 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 40.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 27.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 41.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let mut v833 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v833);
                                                let mut v833 = v833.into_context_iter();
                                                while let Some(v834) = v833.next(ctx) {
                                                    let v835 = C::iconst_sextend_etor(ctx, v834);
                                                    if let Some(v836) = v835 {
                                                        if v836.1 == -0x1 {
                                                            if v2.0 == v836.0 {
                                                                let mut v868 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(
                                                                    ctx, v86.2, &mut v868,
                                                                );
                                                                let mut v868 =
                                                                    v868.into_context_iter();
                                                                while let Some(v869) =
                                                                    v868.next(ctx)
                                                                {
                                                                    if v2.0 == v869.0 {
                                                                        let mut v872 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v869.1, &mut v872,
                                                                        );
                                                                        let mut v872 = v872
                                                                            .into_context_iter();
                                                                        while let Some(v873) =
                                                                            v872.next(ctx)
                                                                        {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v876,
                                                                                args: ref v877,
                                                                                cond: ref v878,
                                                                            } = &v873.1 {
                                                                                if let &Opcode::Icmp = v876 {
                                                                                    match v878 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v873.0 {
                                                                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                let v879 = C::unpack_value_array_2(ctx, v877);
                                                                                                if v815.0 == v879.0 {
                                                                                                    if v815.1 == v879.1 {
                                                                                                        let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                        let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                        // Rule at src/opts/spaceship.isle line 78.
                                                                                                        returns.extend(Some(v925));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::SignedGreaterThan => {
                                                                                            if v91.0 == v873.0 {
                                                                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                let v879 = C::unpack_value_array_2(ctx, v877);
                                                                                                if v815.0 == v879.0 {
                                                                                                    if v815.1 == v879.1 {
                                                                                                        let v924 = constructor_spaceship_s(ctx, v91.0, v815.0, v815.1);
                                                                                                        let v925 = constructor_sextend_maybe(ctx, v2.0, v924);
                                                                                                        // Rule at src/opts/spaceship.isle line 84.
                                                                                                        returns.extend(Some(v925));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 30.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 36.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 31.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 37.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let mut v821 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v821);
                                                let mut v821 = v821.into_context_iter();
                                                while let Some(v822) = v821.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v912,
                                                        arg: v913,
                                                    } = &v822.1
                                                    {
                                                        match v912 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v822.0 {
                                                                    let mut v833 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v833,
                                                                    );
                                                                    let mut v833 =
                                                                        v833.into_context_iter();
                                                                    while let Some(v834) =
                                                                        v833.next(ctx)
                                                                    {
                                                                        let v835 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v834,
                                                                            );
                                                                        if let Some(v836) = v835 {
                                                                            if v836.1 == 0x1 {
                                                                                if v2.0 == v836.0 {
                                                                                    let mut v914 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v913, &mut v914);
                                                                                    let mut v914 = v914.into_context_iter();
                                                                                    while let Some(
                                                                                        v915,
                                                                                    ) = v914
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v918,
                                                                                            args: ref v919,
                                                                                            cond: ref v920,
                                                                                        } = &v915.1 {
                                                                                            if let &Opcode::Icmp = v918 {
                                                                                                match v920 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                    // Rule at src/opts/spaceship.isle line 65.
                                                                                                                    returns.extend(Some(v883));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                    // Rule at src/opts/spaceship.isle line 55.
                                                                                                                    returns.extend(Some(v883));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v822.0 {
                                                                    let mut v833 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v833,
                                                                    );
                                                                    let mut v833 =
                                                                        v833.into_context_iter();
                                                                    while let Some(v834) =
                                                                        v833.next(ctx)
                                                                    {
                                                                        let v835 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v834,
                                                                            );
                                                                        if let Some(v836) = v835 {
                                                                            if v836.1 == 0x1 {
                                                                                if v2.0 == v836.0 {
                                                                                    let mut v914 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v913, &mut v914);
                                                                                    let mut v914 = v914.into_context_iter();
                                                                                    while let Some(
                                                                                        v915,
                                                                                    ) = v914
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v918,
                                                                                            args: ref v919,
                                                                                            cond: ref v920,
                                                                                        } = &v915.1 {
                                                                                            if let &Opcode::Icmp = v918 {
                                                                                                match v920 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                    // Rule at src/opts/spaceship.isle line 69.
                                                                                                                    returns.extend(Some(v883));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v915.0 {
                                                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                            let v921 = C::unpack_value_array_2(ctx, v919);
                                                                                                            if v815.0 == v921.0 {
                                                                                                                if v815.1 == v921.1 {
                                                                                                                    let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                                    let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                                    // Rule at src/opts/spaceship.isle line 59.
                                                                                                                    returns.extend(Some(v883));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 28.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.2 == v815.0 {
                                                    if v86.1 == v815.1 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 42.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 29.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 43.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let mut v833 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v833);
                                                let mut v833 = v833.into_context_iter();
                                                while let Some(v834) = v833.next(ctx) {
                                                    let v835 = C::iconst_sextend_etor(ctx, v834);
                                                    if let Some(v836) = v835 {
                                                        if v836.1 == -0x1 {
                                                            if v2.0 == v836.0 {
                                                                let mut v868 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(
                                                                    ctx, v86.2, &mut v868,
                                                                );
                                                                let mut v868 =
                                                                    v868.into_context_iter();
                                                                while let Some(v869) =
                                                                    v868.next(ctx)
                                                                {
                                                                    if v2.0 == v869.0 {
                                                                        let mut v872 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v869.1, &mut v872,
                                                                        );
                                                                        let mut v872 = v872
                                                                            .into_context_iter();
                                                                        while let Some(v873) =
                                                                            v872.next(ctx)
                                                                        {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v876,
                                                                                args: ref v877,
                                                                                cond: ref v878,
                                                                            } = &v873.1 {
                                                                                if let &Opcode::Icmp = v876 {
                                                                                    match v878 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v873.0 {
                                                                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                let v879 = C::unpack_value_array_2(ctx, v877);
                                                                                                if v815.0 == v879.0 {
                                                                                                    if v815.1 == v879.1 {
                                                                                                        let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                        let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                        // Rule at src/opts/spaceship.isle line 13.
                                                                                                        returns.extend(Some(v883));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::UnsignedGreaterThan => {
                                                                                            if v91.0 == v873.0 {
                                                                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                                                                let v879 = C::unpack_value_array_2(ctx, v877);
                                                                                                if v815.0 == v879.0 {
                                                                                                    if v815.1 == v879.1 {
                                                                                                        let v882 = constructor_spaceship_u(ctx, v91.0, v815.0, v815.1);
                                                                                                        let v883 = constructor_sextend_maybe(ctx, v2.0, v882);
                                                                                                        // Rule at src/opts/spaceship.isle line 19.
                                                                                                        returns.extend(Some(v883));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 32.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 38.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 33.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 39.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v818,
                                                imm: v819,
                                            } = &v97.1
                                            {
                                                if let &Opcode::Iconst = v818 {
                                                    let v820 = C::u64_from_imm64(ctx, v819);
                                                    match v820 {
                                                        0x0 => {
                                                            let mut v821 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v86.2, &mut v821,
                                                            );
                                                            let mut v821 = v821.into_context_iter();
                                                            while let Some(v822) = v821.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v825,
                                                                    imm: v826,
                                                                } = &v822.1 {
                                                                    if let &Opcode::Iconst = v825 {
                                                                        let v827 = C::u64_from_imm64(ctx, v826);
                                                                        let v828 = C::u64_is_zero(ctx, v827);
                                                                        if v828 == false {
                                                                            let v829 = &C::intcc_complement(ctx, v814);
                                                                            let v815 = C::unpack_value_array_2(ctx, v813);
                                                                            let v830 = constructor_icmp(ctx, v91.0, v829, v815.0, v815.1);
                                                                            let v831 = constructor_select(ctx, v2.0, v830, v86.2, v86.1);
                                                                            // Rule at src/opts/selects.isle line 9.
                                                                            returns.extend(Some(v831));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        0x1 => {
                                                            let mut v821 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v86.2, &mut v821,
                                                            );
                                                            let mut v821 = v821.into_context_iter();
                                                            while let Some(v822) = v821.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v825,
                                                                    imm: v826,
                                                                } = &v822.1 {
                                                                    if let &Opcode::Iconst = v825 {
                                                                        let v827 = C::u64_from_imm64(ctx, v826);
                                                                        if v827 == 0x0 {
                                                                            let v832 = constructor_uextend_maybe(ctx, v2.0, v86.0);
                                                                            // Rule at src/opts/selects.isle line 15.
                                                                            returns.extend(Some(v832));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        let mut v833 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v86.1, &mut v833);
                                        let mut v833 = v833.into_context_iter();
                                        while let Some(v834) = v833.next(ctx) {
                                            let v835 = C::iconst_sextend_etor(ctx, v834);
                                            if let Some(v836) = v835 {
                                                if v836.1 == -0x1 {
                                                    let mut v839 =
                                                        C::inst_data_tupled_etor_returns::default();
                                                    C::inst_data_tupled_etor(ctx, v86.2, &mut v839);
                                                    let mut v839 = v839.into_context_iter();
                                                    while let Some(v840) = v839.next(ctx) {
                                                        let v841 =
                                                            C::iconst_sextend_etor(ctx, v840);
                                                        if let Some(v842) = v841 {
                                                            if v842.1 == 0x0 {
                                                                let v845 = constructor_bmask(
                                                                    ctx, v2.0, v86.0,
                                                                );
                                                                // Rule at src/opts/selects.isle line 20.
                                                                returns.extend(Some(v845));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v94,
                                    arg: v95,
                                } => {
                                    if let &Opcode::Uextend = v94 {
                                        let mut v742 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v95, &mut v742);
                                        let mut v742 = v742.into_context_iter();
                                        while let Some(v743) = v742.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v746,
                                                args: ref v747,
                                                cond: ref v748,
                                            } = &v743.1
                                            {
                                                if let &Opcode::Icmp = v746 {
                                                    let v752 = constructor_select(
                                                        ctx, v2.0, v95, v86.1, v86.2,
                                                    );
                                                    // Rule at src/opts/icmp.isle line 29.
                                                    returns.extend(Some(v752));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                    // Rule at src/opts/icmp.isle line 32.
                                                    returns.extend(Some(v752));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v607,
                                    imm: v608,
                                } => {
                                    if let &Opcode::Iconst = v607 {
                                        let v609 = C::u64_from_imm64(ctx, v608);
                                        if v609 == 0x0 {
                                            let v612 = C::subsume(ctx, v86.2);
                                            // Rule at src/opts/cprop.isle line 172.
                                            returns.extend(Some(v612));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v610 = C::u64_is_zero(ctx, v609);
                                        if v610 == false {
                                            let v611 = C::subsume(ctx, v86.1);
                                            // Rule at src/opts/cprop.isle line 170.
                                            returns.extend(Some(v611));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v86.1 == v86.2 {
                            // Rule at src/opts/selects.isle line 4.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                        let mut v216 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v86.0, &mut v216);
                        let mut v216 = v216.into_context_iter();
                        while let Some(v217) = v216.next(ctx) {
                            let v218 = constructor_select(ctx, v2.0, v217, v86.1, v86.2);
                            // Rule at src/opts/bitops.isle line 118.
                            returns.extend(Some(v218));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bitselect => {
                        let v850 = C::multi_lane(ctx, v2.0);
                        if let Some(v851) = v850 {
                            let v86 = C::unpack_value_array_3(ctx, v85);
                            let mut v90 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v86.0, &mut v90);
                            let mut v90 = v90.into_context_iter();
                            while let Some(v91) = v90.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v812,
                                    args: ref v813,
                                    cond: ref v814,
                                } = &v91.1
                                {
                                    if let &Opcode::Icmp = v812 {
                                        match v814 {
                                            &IntCC::SignedGreaterThan => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 46.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 60.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 47.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 61.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 50.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 56.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v848 = constructor_smin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 51.
                                                        returns.extend(Some(v848));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v846 = constructor_smax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 57.
                                                        returns.extend(Some(v846));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 48.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 62.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 49.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 63.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 52.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 58.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v815 = C::unpack_value_array_2(ctx, v813);
                                                if v86.1 == v815.0 {
                                                    if v86.2 == v815.1 {
                                                        let v849 = constructor_umin(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 53.
                                                        returns.extend(Some(v849));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v815.1 {
                                                    if v86.2 == v815.0 {
                                                        let v847 = constructor_umax(
                                                            ctx, v2.0, v815.0, v815.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 59.
                                                        returns.extend(Some(v847));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        if v86.1 == v86.2 {
                            // Rule at src/opts/selects.isle line 5.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Fma => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v94,
                                arg: v95,
                            } = &v91.1
                            {
                                if let &Opcode::Fneg = v94 {
                                    if v2.0 == v91.0 {
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v100,
                                                arg: v101,
                                            } = &v97.1
                                            {
                                                if let &Opcode::Fneg = v100 {
                                                    if v2.0 == v97.0 {
                                                        let v102 = constructor_fma(
                                                            ctx, v2.0, v95, v101, v86.2,
                                                        );
                                                        // Rule at src/opts/arithmetic.isle line 109.
                                                        returns.extend(Some(v102));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v32,
                arg: v33,
            } => {
                match v32 {
                    &Opcode::Splat => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v635,
                                    imm: v636,
                                } => {
                                    if let &Opcode::F32const = v635 {
                                        let v637 = C::u32_from_ieee32(ctx, v636);
                                        let v638 = C::u32_as_u64(ctx, v637);
                                        let v639 = constructor_splat32(ctx, v638);
                                        let v640 = constructor_vconst(ctx, v2.0, v639);
                                        // Rule at src/opts/cprop.isle line 197.
                                        returns.extend(Some(v640));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v641,
                                    imm: v642,
                                } => {
                                    if let &Opcode::F64const = v641 {
                                        let v643 = C::u64_from_ieee64(ctx, v642);
                                        let v644 = C::splat64(ctx, v643);
                                        let v645 = constructor_vconst(ctx, v2.0, v644);
                                        // Rule at src/opts/cprop.isle line 199.
                                        returns.extend(Some(v645));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v528,
                                    imm: v529,
                                } => {
                                    if let &Opcode::Iconst = v528 {
                                        match v35.0 {
                                            I8 => {
                                                let v620 = C::u64_uextend_imm64(ctx, I8, v529);
                                                let v621 = constructor_splat8(ctx, v620);
                                                let v622 = constructor_vconst(ctx, v2.0, v621);
                                                // Rule at src/opts/cprop.isle line 189.
                                                returns.extend(Some(v622));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I16 => {
                                                let v624 = C::u64_uextend_imm64(ctx, I16, v529);
                                                let v625 = constructor_splat16(ctx, v624);
                                                let v626 = constructor_vconst(ctx, v2.0, v625);
                                                // Rule at src/opts/cprop.isle line 191.
                                                returns.extend(Some(v626));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I32 => {
                                                let v628 = C::u64_uextend_imm64(ctx, I32, v529);
                                                let v629 = constructor_splat32(ctx, v628);
                                                let v630 = constructor_vconst(ctx, v2.0, v629);
                                                // Rule at src/opts/cprop.isle line 193.
                                                returns.extend(Some(v630));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I64 => {
                                                let v632 = C::u64_uextend_imm64(ctx, I64, v529);
                                                let v633 = C::splat64(ctx, v632);
                                                let v634 = constructor_vconst(ctx, v2.0, v633);
                                                // Rule at src/opts/cprop.isle line 195.
                                                returns.extend(Some(v634));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v43 = constructor_isub(ctx, v2.0, v40.1, v40.0);
                                                // Rule at src/opts/arithmetic.isle line 28.
                                                returns.extend(Some(v43));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v986 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v40.1, &mut v986);
                                                let mut v986 = v986.into_context_iter();
                                                while let Some(v987) = v986.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v990,
                                                        imm: v991,
                                                    } = &v987.1
                                                    {
                                                        if let &Opcode::Iconst = v990 {
                                                            let v992 = C::u64_from_imm64(ctx, v991);
                                                            let v201 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v993 = C::u64_eq(ctx, v992, v201);
                                                            if v993 == true {
                                                                if v2.0 == v987.0 {
                                                                    let v994 = constructor_sshr(
                                                                        ctx, v2.0, v40.0, v40.1,
                                                                    );
                                                                    // Rule at src/opts/shifts.isle line 99.
                                                                    returns.extend(Some(v994));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            if v2.0 == v35.0 {
                                                let v1010 = C::lane_type(ctx, v2.0);
                                                let v1068 = constructor_ineg(ctx, v1010, v46);
                                                let v1069 = constructor_splat(ctx, v2.0, v1068);
                                                // Rule at src/opts/vector.isle line 45.
                                                returns.extend(Some(v1069));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/arithmetic.isle line 35.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                match v45 {
                                    &Opcode::Splat => {
                                        if v2.0 == v35.0 {
                                            let v1010 = C::lane_type(ctx, v2.0);
                                            let v1070 = constructor_iabs(ctx, v1010, v46);
                                            let v1071 = constructor_splat(ctx, v2.0, v1070);
                                            // Rule at src/opts/vector.isle line 48.
                                            returns.extend(Some(v1071));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v35.0 {
                                            let v50 = constructor_iabs(ctx, v2.0, v46);
                                            // Rule at src/opts/arithmetic.isle line 42.
                                            returns.extend(Some(v50));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v35.0 {
                                            let v51 = C::subsume(ctx, v33);
                                            // Rule at src/opts/arithmetic.isle line 46.
                                            returns.extend(Some(v51));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == -0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(
                                                                    ctx, v2.0, v40.0,
                                                                );
                                                                // Rule at src/opts/arithmetic.isle line 75.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == 0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(
                                                                    ctx, v2.0, v40.0,
                                                                );
                                                                // Rule at src/opts/arithmetic.isle line 73.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v186 = constructor_bnot(ctx, v2.0, v40.0);
                                            let v187 = constructor_bnot(ctx, v2.0, v40.1);
                                            let v189 = constructor_bor(ctx, v2.0, v186, v187);
                                            // Rule at src/opts/bitops.isle line 46.
                                            returns.extend(Some(v189));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v186 = constructor_bnot(ctx, v2.0, v40.0);
                                                let v187 = constructor_bnot(ctx, v2.0, v40.1);
                                                let v188 = constructor_band(ctx, v2.0, v186, v187);
                                                // Rule at src/opts/bitops.isle line 43.
                                                returns.extend(Some(v188));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1048 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1049) = v1048 {
                                                if v2.0 == v35.0 {
                                                    let v1010 = C::lane_type(ctx, v2.0);
                                                    let v1056 = constructor_bnot(ctx, v1010, v46);
                                                    let v1057 = constructor_splat(ctx, v2.0, v1056);
                                                    // Rule at src/opts/vector.isle line 26.
                                                    returns.extend(Some(v1057));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/bitops.isle line 39.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v528,
                                    imm: v529,
                                } => {
                                    if let &Opcode::Iconst = v528 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            if v35.0 == v493 {
                                                let v530 = C::u64_from_imm64(ctx, v529);
                                                let v531 = C::u64_not(ctx, v530);
                                                let v532 = C::imm64_masked(ctx, v493, v531);
                                                let v533 = constructor_iconst(ctx, v493, v532);
                                                let v534 = C::subsume(ctx, v533);
                                                // Rule at src/opts/cprop.isle line 53.
                                                returns.extend(Some(v534));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v805 = C::remat(ctx, arg0);
                        // Rule at src/opts/remat.isle line 24.
                        returns.extend(Some(v805));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Bitrev = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/bitops.isle line 137.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Bswap = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/bitops.isle line 134.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    if v2.0 == v35.0 {
                                        let v1010 = C::lane_type(ctx, v2.0);
                                        let v1072 = constructor_popcnt(ctx, v1010, v46);
                                        let v1073 = constructor_splat(ctx, v2.0, v1072);
                                        // Rule at src/opts/vector.isle line 51.
                                        returns.extend(Some(v1073));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fneg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Fneg = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/arithmetic.isle line 105.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bmask => {
                        if v2.0 == I8 {
                            let mut v34 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v33, &mut v34);
                            let mut v34 = v34.into_context_iter();
                            while let Some(v35) = v34.next(ctx) {
                                if v35.0 == I8 {
                                    if let &InstructionData::IntCompare {
                                        opcode: ref v205,
                                        args: ref v206,
                                        cond: ref v207,
                                    } = &v35.1
                                    {
                                        if let &Opcode::Icmp = v205 {
                                            let v212 = constructor_ineg(ctx, I8, v33);
                                            // Rule at src/opts/bitops.isle line 95.
                                            returns.extend(Some(v212));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let mut v213 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v33, &mut v213);
                        let mut v213 = v213.into_context_iter();
                        while let Some(v214) = v213.next(ctx) {
                            let v215 = constructor_bmask(ctx, v2.0, v214);
                            // Rule at src/opts/bitops.isle line 117.
                            returns.extend(Some(v215));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Ireduce => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v717 = constructor_iadd(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 86.
                                            returns.extend(Some(v717));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v718 = constructor_isub(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 87.
                                            returns.extend(Some(v718));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Imul => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v719 = constructor_imul(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 88.
                                            returns.extend(Some(v719));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v722 = constructor_band(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 91.
                                            returns.extend(Some(v722));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v720 = constructor_bor(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 89.
                                            returns.extend(Some(v720));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v715 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v716 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v721 = constructor_bxor(ctx, v2.0, v715, v716);
                                            // Rule at src/opts/extends.isle line 90.
                                            returns.extend(Some(v721));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Ineg => {
                                            let v712 = constructor_ireduce(ctx, v2.0, v46);
                                            let v713 = constructor_ineg(ctx, v2.0, v712);
                                            // Rule at src/opts/extends.isle line 83.
                                            returns.extend(Some(v713));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v712 = constructor_ireduce(ctx, v2.0, v46);
                                            let v714 = constructor_bnot(ctx, v2.0, v712);
                                            // Rule at src/opts/extends.isle line 84.
                                            returns.extend(Some(v714));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bmask => {
                                            let v239 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src/opts/bitops.isle line 131.
                                            returns.extend(Some(v239));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v698 = C::ty_bits_u64(ctx, v53);
                                                let v697 = C::value_type(ctx, v46);
                                                let v699 = C::ty_bits_u64(ctx, v697);
                                                let v700 = C::u64_lt(ctx, v698, v699);
                                                if v700 == true {
                                                    let v701 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 58.
                                                    returns.extend(Some(v701));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v702 = C::u64_lt(ctx, v699, v698);
                                                if v702 == true {
                                                    let v704 = constructor_uextend(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 65.
                                                    returns.extend(Some(v704));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let v697 = C::value_type(ctx, v46);
                                            if v2.0 == v697 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/extends.isle line 51.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v698 = C::ty_bits_u64(ctx, v53);
                                                let v697 = C::value_type(ctx, v46);
                                                let v699 = C::ty_bits_u64(ctx, v697);
                                                let v700 = C::u64_lt(ctx, v698, v699);
                                                if v700 == true {
                                                    let v701 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 55.
                                                    returns.extend(Some(v701));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v702 = C::u64_lt(ctx, v699, v698);
                                                if v702 == true {
                                                    let v703 = constructor_sextend(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 62.
                                                    returns.extend(Some(v703));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let v697 = C::value_type(ctx, v46);
                                            if v2.0 == v697 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/extends.isle line 50.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v528,
                                    imm: v529,
                                } => {
                                    if let &Opcode::Iconst = v528 {
                                        let v544 = C::fits_in_64(ctx, v35.0);
                                        if let Some(v545) = v544 {
                                            let v530 = C::u64_from_imm64(ctx, v529);
                                            let v546 = C::imm64_masked(ctx, v2.0, v530);
                                            let v547 = constructor_iconst(ctx, v2.0, v546);
                                            let v548 = C::subsume(ctx, v547);
                                            // Rule at src/opts/cprop.isle line 73.
                                            returns.extend(Some(v548));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1092 = constructor_sextend(ctx, v1010, v46);
                                    let v1093 = constructor_splat(ctx, v2.0, v1092);
                                    // Rule at src/opts/vector.isle line 85.
                                    returns.extend(Some(v1093));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1092 = constructor_sextend(ctx, v1010, v46);
                                    let v1093 = constructor_splat(ctx, v2.0, v1092);
                                    // Rule at src/opts/vector.isle line 84.
                                    returns.extend(Some(v1093));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1094 = constructor_uextend(ctx, v1010, v46);
                                    let v1095 = constructor_splat(ctx, v2.0, v1094);
                                    // Rule at src/opts/vector.isle line 88.
                                    returns.extend(Some(v1095));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1094 = constructor_uextend(ctx, v1010, v46);
                                    let v1095 = constructor_splat(ctx, v2.0, v1094);
                                    // Rule at src/opts/vector.isle line 87.
                                    returns.extend(Some(v1095));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Uextend = v45 {
                                        let v669 = constructor_uextend(ctx, v2.0, v46);
                                        // Rule at src/opts/extends.isle line 2.
                                        returns.extend(Some(v669));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v528,
                                    imm: v529,
                                } => {
                                    if let &Opcode::Iconst = v528 {
                                        let v492 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v493) = v492 {
                                            let v530 = C::u64_from_imm64(ctx, v529);
                                            let v549 = constructor_iconst_u(ctx, v493, v530);
                                            let v550 = C::subsume(ctx, v549);
                                            // Rule at src/opts/cprop.isle line 78.
                                            returns.extend(Some(v550));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v205,
                                    args: ref v206,
                                    cond: ref v207,
                                } => {
                                    if let &Opcode::Icmp = v205 {
                                        let v671 = constructor_uextend(ctx, v2.0, v33);
                                        // Rule at src/opts/extends.isle line 12.
                                        returns.extend(Some(v671));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Bmask => {
                                            let v239 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src/opts/bitops.isle line 130.
                                            returns.extend(Some(v239));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v669 = constructor_uextend(ctx, v2.0, v46);
                                            // Rule at src/opts/extends.isle line 8.
                                            returns.extend(Some(v669));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v670 = constructor_sextend(ctx, v2.0, v46);
                                            // Rule at src/opts/extends.isle line 4.
                                            returns.extend(Some(v670));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v492 = C::fits_in_64(ctx, v2.0);
                        if let Some(v493) = v492 {
                            let mut v551 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v33, &mut v551);
                            let mut v551 = v551.into_context_iter();
                            while let Some(v552) = v551.next(ctx) {
                                let v553 = C::iconst_sextend_etor(ctx, v552);
                                if let Some(v554) = v553 {
                                    let v557 = constructor_iconst_s(ctx, v493, v554.1);
                                    let v558 = C::subsume(ctx, v557);
                                    // Rule at src/opts/cprop.isle line 80.
                                    returns.extend(Some(v558));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1044 = constructor_fcvt_from_uint(ctx, v1010, v46);
                                    let v1045 = constructor_splat(ctx, v2.0, v1044);
                                    // Rule at src/opts/vector.isle line 6.
                                    returns.extend(Some(v1045));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1010 = C::lane_type(ctx, v2.0);
                                    let v1046 = constructor_fcvt_from_sint(ctx, v1010, v46);
                                    let v1047 = constructor_splat(ctx, v2.0, v1046);
                                    // Rule at src/opts/vector.isle line 8.
                                    returns.extend(Some(v1047));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v808,
                imm: v809,
            } => {
                if let &Opcode::F32const = v808 {
                    let v805 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 28.
                    returns.extend(Some(v805));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v810,
                imm: v811,
            } => {
                if let &Opcode::F64const = v810 {
                    let v805 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 30.
                    returns.extend(Some(v805));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v806,
                imm: v807,
            } => {
                if let &Opcode::Iconst = v806 {
                    let v805 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 26.
                    returns.extend(Some(v805));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term iconst_s.
pub fn constructor_iconst_s<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Value {
    if arg0 == I128 {
        let v12 = constructor_iconst_s(ctx, I64, arg1);
        let v13 = constructor_sextend(ctx, I128, v12);
        // Rule at src/prelude_opt.isle line 83.
        return v13;
    }
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = C::ty_umax(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::i64_sextend_u64(ctx, arg0, v4);
    let v6 = C::i64_as_u64(ctx, v5);
    let v7 = C::u64_eq(ctx, v2, v6);
    if v7 == true {
        let v8 = C::imm64(ctx, v4);
        let v9 = constructor_iconst(ctx, arg0, v8);
        // Rule at src/prelude_opt.isle line 78.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_s", "src/prelude_opt.isle line 76"
    )
}

// Generated as internal constructor for term iconst_u.
pub fn constructor_iconst_u<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Value {
    if arg0 == I128 {
        let v8 = constructor_iconst_u(ctx, I64, arg1);
        let v9 = constructor_uextend(ctx, I128, v8);
        // Rule at src/prelude_opt.isle line 96.
        return v9;
    }
    let v2 = C::ty_umax(ctx, arg0);
    let v3 = C::u64_le(ctx, arg1, v2);
    if v3 == true {
        let v4 = C::imm64(ctx, arg1);
        let v5 = constructor_iconst(ctx, arg0, v4);
        // Rule at src/prelude_opt.isle line 93.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_u", "src/prelude_opt.isle line 91"
    )
}

// Generated as internal constructor for term uextend_maybe.
pub fn constructor_uextend_maybe<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src/prelude_opt.isle line 116.
        return arg1;
    }
    let v2 = constructor_uextend(ctx, arg0, arg1);
    // Rule at src/prelude_opt.isle line 115.
    return v2;
}

// Generated as internal constructor for term sextend_maybe.
pub fn constructor_sextend_maybe<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src/prelude_opt.isle line 122.
        return arg1;
    }
    let v2 = constructor_sextend(ctx, arg0, arg1);
    // Rule at src/prelude_opt.isle line 121.
    return v2;
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 109.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 110.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let mut v39 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v36.1, &mut v39);
                        let mut v39 = v39.into_context_iter();
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1
                            {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0 {
                                        // Rule at src/opts/bitops.isle line 113.
                                        returns.extend(Some(v36.0));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let mut v18 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v14.1, &mut v18);
                    let mut v18 = v18.into_context_iter();
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1
                        {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let mut v26 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v14.2, &mut v26);
                                    let mut v26 = v26.into_context_iter();
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1
                                        {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0 {
                                                    // Rule at src/opts/bitops.isle line 111.
                                                    returns.extend(Some(v14.0));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src/opts/bitops.isle line 105.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/opts/bitops.isle line 107.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bswap => {
                        // Rule at src/opts/bitops.isle line 106.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Popcnt => {
                        // Rule at src/opts/bitops.isle line 108.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bmask => {
                        // Rule at src/opts/bitops.isle line 104.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Uextend => {
                        // Rule at src/opts/bitops.isle line 103.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Sextend => {
                        // Rule at src/opts/bitops.isle line 102.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src/opts/cprop.isle line 203.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src/opts/cprop.isle line 205.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src/opts/cprop.isle line 207.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2, v4);
        // Rule at src/opts/icmp.isle line 157.
        return Some(v7);
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 162.
            return 0x1;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 171.
            return 0x6;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 168.
            return 0x4;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 170.
            return 0x5;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 164.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 166.
            return 0x3;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 167.
            return 0x4;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 169.
            return 0x5;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 163.
            return 0x2;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 165.
            return 0x3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "decompose_intcc", "src/opts/icmp.isle line 161"
    )
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0 => {
            let v6 = constructor_iconst_u(ctx, arg0, 0x0);
            let v7 = C::subsume(ctx, v6);
            // Rule at src/opts/icmp.isle line 174.
            return v7;
        }
        0x1 => {
            let v9 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src/opts/icmp.isle line 175.
            return v9;
        }
        0x2 => {
            match arg2 {
                true => {
                    let v13 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 177.
                    return v13;
                }
                false => {
                    let v11 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 176.
                    return v11;
                }
                _ => {}
            }
        }
        0x3 => {
            match arg2 {
                true => {
                    let v17 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 179.
                    return v17;
                }
                false => {
                    let v15 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 178.
                    return v15;
                }
                _ => {}
            }
        }
        0x4 => {
            match arg2 {
                true => {
                    let v21 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 181.
                    return v21;
                }
                false => {
                    let v19 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 180.
                    return v19;
                }
                _ => {}
            }
        }
        0x5 => {
            match arg2 {
                true => {
                    let v25 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 183.
                    return v25;
                }
                false => {
                    let v23 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 182.
                    return v23;
                }
                _ => {}
            }
        }
        0x6 => {
            let v27 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src/opts/icmp.isle line 184.
            return v27;
        }
        0x7 => {
            let v29 = constructor_iconst_u(ctx, arg0, 0x1);
            let v30 = C::subsume(ctx, v29);
            // Rule at src/opts/icmp.isle line 185.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "compose_icmp", "src/opts/icmp.isle line 173"
    )
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 196.
            return 0x3;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 197.
            return 0x3;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 194.
            return 0x2;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 195.
            return 0x2;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 192.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 193.
            return 0x2;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 190.
            return 0x1;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 191.
            return 0x1;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 188.
            return 0x1;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 189.
            return 0x1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "intcc_class", "src/opts/icmp.isle line 187"
    )
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(ctx: &mut C, arg0: u64) -> Option<Type> {
    match arg0 {
        0x8 => {
            // Rule at src/opts/shifts.isle line 94.
            return Some(I8);
        }
        0x10 => {
            // Rule at src/opts/shifts.isle line 95.
            return Some(I16);
        }
        0x20 => {
            // Rule at src/opts/shifts.isle line 96.
            return Some(I32);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 215.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 212.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 210.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iadd_uextend", "src/opts/shifts.isle line 209"
    )
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 227.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 224.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 222.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "isub_uextend", "src/opts/shifts.isle line 221"
    )
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: FuncRef) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 362.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 371.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 380.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 389.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 398.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 407.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 416.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 425.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 434.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 443.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 452.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 461.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 470.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 479.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 488.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 497.
    return v6;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 506.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 515.
    return v6;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 524.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 533.
    return v6;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 542.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 551.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 560.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 569.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 578.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 587.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 596.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 605.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 614.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 623.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 632.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 641.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 650.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 659.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 668.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 677.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 686.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 695.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 704.
    return v3;
}

// Generated as internal constructor for term table_addr.
pub fn constructor_table_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Table,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::TableAddr {
        opcode: Opcode::TableAddr,
        arg: arg2,
        table: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 713.
    return v6;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Imm64) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 722.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee32) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 731.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee64) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 740.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Constant) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 749.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 758.
    return v7;
}

// Generated as internal constructor for term null.
pub fn constructor_null<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::Null,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 767.
    return v3;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 776.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 785.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 794.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 803.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 812.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 821.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 830.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 839.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 848.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 857.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 866.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 875.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 884.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 893.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 902.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 911.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 920.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 929.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 938.
    return v6;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 947.
    return v6;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 956.
    return v6;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 965.
    return v6;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 974.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 983.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 992.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1001.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1010.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1019.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1028.
    return v5;
}

// Generated as internal constructor for term iadd_cin.
pub fn constructor_iadd_cin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IaddCin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1037.
    return v7;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &TrapCode,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v5.clone(),
        code: arg3.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1046.
    return v7;
}

// Generated as internal constructor for term isub_bin.
pub fn constructor_isub_bin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IsubBin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1055.
    return v7;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1064.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1073.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1082.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1091.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1100.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1109.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1118.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1127.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Imm64) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1136.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1145.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1163.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1172.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1181.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1190.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1199.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1208.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1217.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1226.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1235.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1244.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1253.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1262.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1271.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1280.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1289.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1298.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1307.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1316.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1325.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1334.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1343.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1352.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1361.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1370.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1379.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1388.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1397.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1406.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1415.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1424.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1433.
    return v4;
}

// Generated as internal constructor for term is_null.
pub fn constructor_is_null<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsNull,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1442.
    return v4;
}

// Generated as internal constructor for term is_invalid.
pub fn constructor_is_invalid<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsInvalid,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1451.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1460.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1469.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1478.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1487.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1496.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1505.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1514.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1523.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1532.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1541.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1550.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1559.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1568.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1577.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1586.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1595.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1604.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1613.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1622.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1631.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1640.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1649.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1658.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1667.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1676.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1685.
    return v4;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1694.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: &AtomicRmwOp,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_2_ctor(ctx, arg3, arg4);
    let v7 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v6.clone(),
        flags: arg1,
        op: arg2.clone(),
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1703.
    return v8;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_3_ctor(ctx, arg2, arg3, arg4);
    let v7 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v6.clone(),
        flags: arg1,
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1712.
    return v8;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1721.
    return v5;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /Users/xingyuntian/Develop/wasm/wasm-component-exmaple/example-host/target/release/build/cranelift-codegen-c96f6338bc4f124c/out/clif_opt.isle line 1730.
    return v5;
}
